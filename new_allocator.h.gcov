        -:    0:Source:/usr/include/c++/10/ext/new_allocator.h
        -:    0:Graph:testing.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    1:// Allocator that wraps operator new -*- C++ -*-
        -:    2:
        -:    3:// Copyright (C) 2001-2020 Free Software Foundation, Inc.
        -:    4://
        -:    5:// This file is part of the GNU ISO C++ Library.  This library is free
        -:    6:// software; you can redistribute it and/or modify it under the
        -:    7:// terms of the GNU General Public License as published by the
        -:    8:// Free Software Foundation; either version 3, or (at your option)
        -:    9:// any later version.
        -:   10:
        -:   11:// This library is distributed in the hope that it will be useful,
        -:   12:// but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   13:// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   14:// GNU General Public License for more details.
        -:   15:
        -:   16:// Under Section 7 of GPL version 3, you are granted additional
        -:   17:// permissions described in the GCC Runtime Library Exception, version
        -:   18:// 3.1, as published by the Free Software Foundation.
        -:   19:
        -:   20:// You should have received a copy of the GNU General Public License and
        -:   21:// a copy of the GCC Runtime Library Exception along with this program;
        -:   22:// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
        -:   23:// <http://www.gnu.org/licenses/>.
        -:   24:
        -:   25:/** @file ext/new_allocator.h
        -:   26: *  This file is a GNU extension to the Standard C++ Library.
        -:   27: */
        -:   28:
        -:   29:#ifndef _NEW_ALLOCATOR_H
        -:   30:#define _NEW_ALLOCATOR_H 1
        -:   31:
        -:   32:#include <bits/c++config.h>
        -:   33:#include <new>
        -:   34:#include <bits/functexcept.h>
        -:   35:#include <bits/move.h>
        -:   36:#if __cplusplus >= 201103L
        -:   37:#include <type_traits>
        -:   38:#endif
        -:   39:
        -:   40:namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
        -:   41:{
        -:   42:_GLIBCXX_BEGIN_NAMESPACE_VERSION
        -:   43:
        -:   44:  /**
        -:   45:   *  @brief  An allocator that uses global new, as per [20.4].
        -:   46:   *  @ingroup allocators
        -:   47:   *
        -:   48:   *  This is precisely the allocator defined in the C++ Standard.
        -:   49:   *    - all allocation calls operator new
        -:   50:   *    - all deallocation calls operator delete
        -:   51:   *
        -:   52:   *  @tparam  _Tp  Type of allocated object.
        -:   53:   */
        -:   54:  template<typename _Tp>
        -:   55:    class new_allocator
        -:   56:    {
        -:   57:    public:
        -:   58:      typedef _Tp        value_type;
        -:   59:      typedef std::size_t     size_type;
        -:   60:      typedef std::ptrdiff_t  difference_type;
        -:   61:#if __cplusplus <= 201703L
        -:   62:      typedef _Tp*       pointer;
        -:   63:      typedef const _Tp* const_pointer;
        -:   64:      typedef _Tp&       reference;
        -:   65:      typedef const _Tp& const_reference;
        -:   66:
        -:   67:      template<typename _Tp1>
        -:   68:	struct rebind
        -:   69:	{ typedef new_allocator<_Tp1> other; };
        -:   70:#endif
        -:   71:
        -:   72:#if __cplusplus >= 201103L
        -:   73:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:   74:      // 2103. propagate_on_container_move_assignment
        -:   75:      typedef std::true_type propagate_on_container_move_assignment;
        -:   76:#endif
        -:   77:
        -:   78:      _GLIBCXX20_CONSTEXPR
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::AssertionStats>::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::shared_ptr<Catch::TestCaseTracking::ITracker> >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::TestCase const*>::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::shared_ptr<Catch::TestSpec::Pattern> >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::TestSpec::NamePattern>::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::TestSpec::ExcludedPattern>::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::TestSpec::TagPattern>::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::SummaryColumn>::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::unique_ptr<Catch::IStreamingReporter, std::default_delete<Catch::IStreamingReporter> > >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Rb_tree_node<Catch::Verbosity> >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::BoundFlagLambda<Catch::clara::detail::Help::Help(bool&)::{lambda(bool)#1}> >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::BoundFlagLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(bool)#9}> >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::BoundValueRef<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::SectionInfo>::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::ReporterRegistrar<Catch::CompactReporter>::ReporterFactory>::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::ReporterRegistrar<Catch::ConsoleReporter>::ReporterFactory>::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::TestCaseTracking::SectionTracker>::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::vector<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode>, std::allocator<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > > >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > > >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestRunStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > > > >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::ReporterRegistrar<Catch::JunitReporter>::ReporterFactory>::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::ReporterRegistrar<Catch::XmlReporter>::ReporterFactory>::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#8}> >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(int)#10}> >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#1}> >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(bool)#11}> >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::BoundValueRef<double> >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Catch::TagInfo> > >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<char>::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<wchar_t>::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::HelpColumns>::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::TestSpec::FilterMatch>::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::Verbosity>::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::(anonymous namespace)::ColumnInfo>::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::clara::TextFlow::Column::iterator>::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::clara::TextFlow::Column>::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::Token>::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::BoundValueRef<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::BoundFlagRef>::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::TestSpec::Filter>::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::StringRef>::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::pair<int, Catch::StringRef> >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#2}> >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Rb_tree_node<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<unsigned long>::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::MessageInfo>::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::Generators::GeneratorTracker>::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::ScopedMessage>::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::SectionEndInfo>::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::TestCaseTracking::ITracker*>::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Rb_tree_node<Catch::TestCase const*> >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::Opt>::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::Arg>::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::Config>::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::ISingleton*>::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::pair<unsigned long, Catch::TestCase const*> >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::TestCase>::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Rb_tree_node<Catch::TestCase> >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundValueRef<unsigned int>, std::allocator<Catch::clara::detail::BoundValueRef<unsigned int> >, (__gnu_cxx::_Lock_policy)2> >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode>, std::allocator<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> >, (__gnu_cxx::_Lock_policy)2> >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> >, std::allocator<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > >, (__gnu_cxx::_Lock_policy)2> >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::ReporterRegistrar<Catch::JunitReporter>::ReporterFactory, std::allocator<Catch::ReporterRegistrar<Catch::JunitReporter>::ReporterFactory>, (__gnu_cxx::_Lock_policy)2> >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::ReporterRegistrar<Catch::XmlReporter>::ReporterFactory, std::allocator<Catch::ReporterRegistrar<Catch::XmlReporter>::ReporterFactory>, (__gnu_cxx::_Lock_policy)2> >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#8}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#8}>, (__gnu_cxx::_Lock_policy)2> >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(int)#10}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(int)#10}>, (__gnu_cxx::_Lock_policy)2> >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#1}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#1}>, (__gnu_cxx::_Lock_policy)2> >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(bool)#11}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(bool)#11}>, (__gnu_cxx::_Lock_policy)2> >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundValueRef<double>, std::allocator<Catch::clara::detail::BoundValueRef<double> >, (__gnu_cxx::_Lock_policy)2> >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#2}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#2}>, (__gnu_cxx::_Lock_policy)2> >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#7}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#7}>, (__gnu_cxx::_Lock_policy)2> >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#3}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#3}>, (__gnu_cxx::_Lock_policy)2> >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#4}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#4}>, (__gnu_cxx::_Lock_policy)2> >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#5}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#5}>, (__gnu_cxx::_Lock_policy)2> >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#6}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#6}>, (__gnu_cxx::_Lock_policy)2> >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::ReporterRegistrar<Catch::ConsoleReporter>::ReporterFactory, std::allocator<Catch::ReporterRegistrar<Catch::ConsoleReporter>::ReporterFactory>, (__gnu_cxx::_Lock_policy)2> >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundValueRef<long>, std::allocator<Catch::clara::detail::BoundValueRef<long> >, (__gnu_cxx::_Lock_policy)2> >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::pair<long, std::vector<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > > >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::__detail::_StateSeq<std::__cxx11::regex_traits<char> > >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::__detail::_StateSeq<std::__cxx11::regex_traits<char> >*>::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::__detail::_NFA<std::__cxx11::regex_traits<char> >, std::allocator<std::__detail::_NFA<std::__cxx11::regex_traits<char> > >, (__gnu_cxx::_Lock_policy)2> >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<long const, long> > >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::pair<char, char> >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::__cxx11::regex_traits<char>::_RegexMask>::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<long>::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<long*>::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::__detail::_State<char> >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode>::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestRunStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > > >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode, std::allocator<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode>, (__gnu_cxx::_Lock_policy)2> >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, (__gnu_cxx::_Lock_policy)2> >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#7}> >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#3}> >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#4}> >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#5}> >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#6}> >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::BoundValueRef<unsigned int> >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::BoundValueRef<long> >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<Catch::IReporterFactory> > > >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::shared_ptr<Catch::IReporterFactory> >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::unique_ptr<Catch::IExceptionTranslator const, std::default_delete<Catch::IExceptionTranslator const> > >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Catch::TagAlias> > >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::__exception_ptr::exception_ptr>::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::unique_ptr<Catch::Detail::EnumInfo, std::default_delete<Catch::Detail::EnumInfo> > >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::unique_ptr<std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >, std::default_delete<std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> > > > >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<char*>::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestRunStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > >, std::allocator<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestRunStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > > >, (__gnu_cxx::_Lock_policy)2> >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundValueRef<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<Catch::clara::detail::BoundValueRef<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, (__gnu_cxx::_Lock_policy)2> >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundFlagRef, std::allocator<Catch::clara::detail::BoundFlagRef>, (__gnu_cxx::_Lock_policy)2> >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::pair<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, int> >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::Generators::GeneratorTracker, std::allocator<Catch::Generators::GeneratorTracker>, (__gnu_cxx::_Lock_policy)2> >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::Config, std::allocator<Catch::Config>, (__gnu_cxx::_Lock_policy)2> >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::TestCaseTracking::SectionTracker, std::allocator<Catch::TestCaseTracking::SectionTracker>, (__gnu_cxx::_Lock_policy)2> >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::TestSpec::NamePattern, std::allocator<Catch::TestSpec::NamePattern>, (__gnu_cxx::_Lock_policy)2> >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::TestSpec::ExcludedPattern, std::allocator<Catch::TestSpec::ExcludedPattern>, (__gnu_cxx::_Lock_policy)2> >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::TestSpec::TagPattern, std::allocator<Catch::TestSpec::TagPattern>, (__gnu_cxx::_Lock_policy)2> >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundFlagLambda<Catch::clara::detail::Help::Help(bool&)::{lambda(bool)#1}>, std::allocator<Catch::clara::detail::Help::Help(bool&)::{lambda(bool)#1}>, (__gnu_cxx::_Lock_policy)2> >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundFlagLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(bool)#9}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(bool)#9}>, (__gnu_cxx::_Lock_policy)2> >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundValueRef<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::allocator<Catch::clara::detail::BoundValueRef<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > >, (__gnu_cxx::_Lock_policy)2> >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::__detail::_NFA<std::__cxx11::regex_traits<char> > >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::ReporterRegistrar<Catch::CompactReporter>::ReporterFactory, std::allocator<Catch::ReporterRegistrar<Catch::CompactReporter>::ReporterFactory>, (__gnu_cxx::_Lock_policy)2> >::new_allocator():
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
        -:   80:
        -:   81:      _GLIBCXX20_CONSTEXPR
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<char>::new_allocator(__gnu_cxx::new_allocator<char> const&):
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::BoundFlagLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(bool)#9}> >::new_allocator(Catch::clara::detail::BoundFlagLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(bool)#9}> const&):
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::BoundFlagLambda<Catch::clara::detail::Help::Help(bool&)::{lambda(bool)#1}> >::new_allocator(Catch::clara::detail::BoundFlagLambda<Catch::clara::detail::Help::Help(bool&)::{lambda(bool)#1}> const&):
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::TestSpec::TagPattern>::new_allocator(__gnu_cxx::new_allocator<Catch::TestSpec::TagPattern> const&):
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::TestSpec::ExcludedPattern>::new_allocator(__gnu_cxx::new_allocator<Catch::TestSpec::ExcludedPattern> const&):
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::TestSpec::NamePattern>::new_allocator(__gnu_cxx::new_allocator<Catch::TestSpec::NamePattern> const&):
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::TestCaseTracking::SectionTracker>::new_allocator(__gnu_cxx::new_allocator<Catch::TestCaseTracking::SectionTracker> const&):
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::Config>::new_allocator(__gnu_cxx::new_allocator<Catch::Config> const&):
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::Generators::GeneratorTracker>::new_allocator(__gnu_cxx::new_allocator<Catch::Generators::GeneratorTracker> const&):
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::BoundFlagRef>::new_allocator(__gnu_cxx::new_allocator<Catch::clara::detail::BoundFlagRef> const&):
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::BoundValueRef<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::new_allocator(__gnu_cxx::new_allocator<Catch::clara::detail::BoundValueRef<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&):
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::shared_ptr<Catch::TestSpec::Pattern> >::new_allocator(__gnu_cxx::new_allocator<std::shared_ptr<Catch::TestSpec::Pattern> > const&):
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::MessageInfo>::new_allocator(__gnu_cxx::new_allocator<Catch::MessageInfo> const&):
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::Token>::new_allocator(__gnu_cxx::new_allocator<Catch::clara::detail::Token> const&):
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::BoundValueRef<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > >::new_allocator(__gnu_cxx::new_allocator<Catch::clara::detail::BoundValueRef<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > const&):
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::(anonymous namespace)::ColumnInfo>::new_allocator(__gnu_cxx::new_allocator<Catch::(anonymous namespace)::ColumnInfo> const&):
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::Verbosity>::new_allocator(__gnu_cxx::new_allocator<Catch::Verbosity> const&):
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::TestSpec::Filter>::new_allocator(__gnu_cxx::new_allocator<Catch::TestSpec::Filter> const&):
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::TestSpec::FilterMatch>::new_allocator(__gnu_cxx::new_allocator<Catch::TestSpec::FilterMatch> const&):
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::TestCase const*>::new_allocator(__gnu_cxx::new_allocator<Catch::TestCase const*> const&):
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::new_allocator(__gnu_cxx::new_allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const&):
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Rb_tree_node<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::new_allocator(__gnu_cxx::new_allocator<std::_Rb_tree_node<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&):
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::TestCase>::new_allocator(__gnu_cxx::new_allocator<Catch::TestCase> const&):
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::Arg>::new_allocator(__gnu_cxx::new_allocator<Catch::clara::detail::Arg> const&):
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::Opt>::new_allocator(__gnu_cxx::new_allocator<Catch::clara::detail::Opt> const&):
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::HelpColumns>::new_allocator(__gnu_cxx::new_allocator<Catch::clara::detail::HelpColumns> const&):
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::clara::TextFlow::Column>::new_allocator(__gnu_cxx::new_allocator<Catch::clara::TextFlow::Column> const&):
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Rb_tree_node<Catch::Verbosity> >::new_allocator(__gnu_cxx::new_allocator<std::_Rb_tree_node<Catch::Verbosity> > const&):
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#7}> >::new_allocator(Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#7}> const&):
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode>::new_allocator(__gnu_cxx::new_allocator<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> const&):
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::new_allocator(__gnu_cxx::new_allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&):
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::__cxx11::regex_traits<char>::_RegexMask>::new_allocator(__gnu_cxx::new_allocator<std::__cxx11::regex_traits<char>::_RegexMask> const&):
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::pair<char, char> >::new_allocator(__gnu_cxx::new_allocator<std::pair<char, char> > const&):
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::__detail::_NFA<std::__cxx11::regex_traits<char> > >::new_allocator(__gnu_cxx::new_allocator<std::__detail::_NFA<std::__cxx11::regex_traits<char> > > const&):
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::pair<long, std::vector<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > > >::new_allocator(__gnu_cxx::new_allocator<std::pair<long, std::vector<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > > > const&):
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::pair<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, int> >::new_allocator(__gnu_cxx::new_allocator<std::pair<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, int> > const&):
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::BoundValueRef<long> >::new_allocator(__gnu_cxx::new_allocator<Catch::clara::detail::BoundValueRef<long> > const&):
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::BoundValueRef<unsigned int> >::new_allocator(__gnu_cxx::new_allocator<Catch::clara::detail::BoundValueRef<unsigned int> > const&):
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#6}> >::new_allocator(Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#6}> const&):
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#5}> >::new_allocator(Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#5}> const&):
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#4}> >::new_allocator(Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#4}> const&):
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#3}> >::new_allocator(Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#3}> const&):
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestRunStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > > >::new_allocator(__gnu_cxx::new_allocator<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestRunStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > > > const&):
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#2}> >::new_allocator(Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#2}> const&):
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::BoundValueRef<double> >::new_allocator(__gnu_cxx::new_allocator<Catch::clara::detail::BoundValueRef<double> > const&):
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(bool)#11}> >::new_allocator(Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(bool)#11}> const&):
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#1}> >::new_allocator(Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#1}> const&):
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(int)#10}> >::new_allocator(Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(int)#10}> const&):
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#8}> >::new_allocator(Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#8}> const&):
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::new_allocator(__gnu_cxx::new_allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&):
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::ReporterRegistrar<Catch::XmlReporter>::ReporterFactory>::new_allocator(__gnu_cxx::new_allocator<Catch::ReporterRegistrar<Catch::XmlReporter>::ReporterFactory> const&):
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::ReporterRegistrar<Catch::JunitReporter>::ReporterFactory>::new_allocator(__gnu_cxx::new_allocator<Catch::ReporterRegistrar<Catch::JunitReporter>::ReporterFactory> const&):
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > >::new_allocator(__gnu_cxx::new_allocator<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > > const&):
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> >::new_allocator(__gnu_cxx::new_allocator<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > const&):
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::ReporterRegistrar<Catch::ConsoleReporter>::ReporterFactory>::new_allocator(__gnu_cxx::new_allocator<Catch::ReporterRegistrar<Catch::ConsoleReporter>::ReporterFactory> const&):
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::ReporterRegistrar<Catch::CompactReporter>::ReporterFactory>::new_allocator(__gnu_cxx::new_allocator<Catch::ReporterRegistrar<Catch::CompactReporter>::ReporterFactory> const&):
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
        -:   83:
        -:   84:      template<typename _Tp1>
        -:   85:	_GLIBCXX20_CONSTEXPR
        -:   86:	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }
        -:   87:
        -:   88:#if __cplusplus <= 201703L
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > > >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Rb_tree_node<Catch::Verbosity> >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::BoundValueRef<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::BoundFlagRef>::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<Catch::IReporterFactory> > > >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::Generators::GeneratorTracker>::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::Config>::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Catch::TagAlias> > >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::TestCaseTracking::SectionTracker>::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::TestSpec::NamePattern>::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::TestSpec::ExcludedPattern>::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::TestSpec::TagPattern>::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::SectionInfo>::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::AssertionStats>::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::vector<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode>, std::allocator<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > > >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::unique_ptr<Catch::IStreamingReporter, std::default_delete<Catch::IStreamingReporter> > >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestRunStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > > > >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::BoundFlagLambda<Catch::clara::detail::Help::Help(bool&)::{lambda(bool)#1}> >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::BoundFlagLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(bool)#9}> >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::BoundValueRef<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::unique_ptr<Catch::IExceptionTranslator const, std::default_delete<Catch::IExceptionTranslator const> > >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::shared_ptr<Catch::IReporterFactory> >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::__exception_ptr::exception_ptr>::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::unique_ptr<Catch::Detail::EnumInfo, std::default_delete<Catch::Detail::EnumInfo> > >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::unique_ptr<std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >, std::default_delete<std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> > > > >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::ReporterRegistrar<Catch::CompactReporter>::ReporterFactory>::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::ReporterRegistrar<Catch::ConsoleReporter>::ReporterFactory>::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::ReporterRegistrar<Catch::JunitReporter>::ReporterFactory>::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<unsigned long>::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<char>::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<wchar_t>::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::clara::TextFlow::Column::iterator>::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::clara::TextFlow::Column>::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::Token>::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::HelpColumns>::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::Opt>::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::Arg>::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::TestSpec::Filter>::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::StringRef>::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::pair<int, Catch::StringRef> >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::TestCase>::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Catch::TagInfo> > >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Rb_tree_node<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::ReporterRegistrar<Catch::XmlReporter>::ReporterFactory>::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::MessageInfo>::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::ScopedMessage>::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::SectionEndInfo>::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::TestCaseTracking::ITracker*>::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Rb_tree_node<Catch::TestCase const*> >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::TestSpec::FilterMatch>::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::ISingleton*>::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::pair<unsigned long, Catch::TestCase const*> >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Rb_tree_node<Catch::TestCase> >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::shared_ptr<Catch::TestCaseTracking::ITracker> >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::TestCase const*>::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::shared_ptr<Catch::TestSpec::Pattern> >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::Verbosity>::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::(anonymous namespace)::ColumnInfo>::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::SummaryColumn>::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#5}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#5}>, (__gnu_cxx::_Lock_policy)2> >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::ReporterRegistrar<Catch::CompactReporter>::ReporterFactory, std::allocator<Catch::ReporterRegistrar<Catch::CompactReporter>::ReporterFactory>, (__gnu_cxx::_Lock_policy)2> >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::ReporterRegistrar<Catch::ConsoleReporter>::ReporterFactory, std::allocator<Catch::ReporterRegistrar<Catch::ConsoleReporter>::ReporterFactory>, (__gnu_cxx::_Lock_policy)2> >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode>, std::allocator<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> >, (__gnu_cxx::_Lock_policy)2> >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> >, std::allocator<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > >, (__gnu_cxx::_Lock_policy)2> >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::ReporterRegistrar<Catch::JunitReporter>::ReporterFactory, std::allocator<Catch::ReporterRegistrar<Catch::JunitReporter>::ReporterFactory>, (__gnu_cxx::_Lock_policy)2> >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::ReporterRegistrar<Catch::XmlReporter>::ReporterFactory, std::allocator<Catch::ReporterRegistrar<Catch::XmlReporter>::ReporterFactory>, (__gnu_cxx::_Lock_policy)2> >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#8}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#8}>, (__gnu_cxx::_Lock_policy)2> >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(int)#10}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(int)#10}>, (__gnu_cxx::_Lock_policy)2> >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#1}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#1}>, (__gnu_cxx::_Lock_policy)2> >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(bool)#11}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(bool)#11}>, (__gnu_cxx::_Lock_policy)2> >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundValueRef<double>, std::allocator<Catch::clara::detail::BoundValueRef<double> >, (__gnu_cxx::_Lock_policy)2> >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#2}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#2}>, (__gnu_cxx::_Lock_policy)2> >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#7}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#7}>, (__gnu_cxx::_Lock_policy)2> >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#3}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#3}>, (__gnu_cxx::_Lock_policy)2> >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#4}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#4}>, (__gnu_cxx::_Lock_policy)2> >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::pair<long, std::vector<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > > >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#6}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#6}>, (__gnu_cxx::_Lock_policy)2> >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundValueRef<unsigned int>, std::allocator<Catch::clara::detail::BoundValueRef<unsigned int> >, (__gnu_cxx::_Lock_policy)2> >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundValueRef<long>, std::allocator<Catch::clara::detail::BoundValueRef<long> >, (__gnu_cxx::_Lock_policy)2> >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::__detail::_StateSeq<std::__cxx11::regex_traits<char> >*>::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::__detail::_NFA<std::__cxx11::regex_traits<char> >, std::allocator<std::__detail::_NFA<std::__cxx11::regex_traits<char> > >, (__gnu_cxx::_Lock_policy)2> >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::pair<char, char> >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::__cxx11::regex_traits<char>::_RegexMask>::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<long const, long> > >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<long>::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<long*>::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::__detail::_State<char> >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode>::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestRunStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > > >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode, std::allocator<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode>, (__gnu_cxx::_Lock_policy)2> >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, (__gnu_cxx::_Lock_policy)2> >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#8}> >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(int)#10}> >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#1}> >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(bool)#11}> >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::BoundValueRef<double> >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#2}> >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#7}> >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#3}> >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#4}> >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#5}> >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#6}> >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::BoundValueRef<unsigned int> >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::BoundValueRef<long> >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<char*>::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestRunStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > >, std::allocator<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestRunStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > > >, (__gnu_cxx::_Lock_policy)2> >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundValueRef<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<Catch::clara::detail::BoundValueRef<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, (__gnu_cxx::_Lock_policy)2> >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundFlagRef, std::allocator<Catch::clara::detail::BoundFlagRef>, (__gnu_cxx::_Lock_policy)2> >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::pair<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, int> >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::Generators::GeneratorTracker, std::allocator<Catch::Generators::GeneratorTracker>, (__gnu_cxx::_Lock_policy)2> >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::Config, std::allocator<Catch::Config>, (__gnu_cxx::_Lock_policy)2> >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::TestCaseTracking::SectionTracker, std::allocator<Catch::TestCaseTracking::SectionTracker>, (__gnu_cxx::_Lock_policy)2> >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::TestSpec::NamePattern, std::allocator<Catch::TestSpec::NamePattern>, (__gnu_cxx::_Lock_policy)2> >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::TestSpec::ExcludedPattern, std::allocator<Catch::TestSpec::ExcludedPattern>, (__gnu_cxx::_Lock_policy)2> >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::TestSpec::TagPattern, std::allocator<Catch::TestSpec::TagPattern>, (__gnu_cxx::_Lock_policy)2> >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundFlagLambda<Catch::clara::detail::Help::Help(bool&)::{lambda(bool)#1}>, std::allocator<Catch::clara::detail::Help::Help(bool&)::{lambda(bool)#1}>, (__gnu_cxx::_Lock_policy)2> >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundFlagLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(bool)#9}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(bool)#9}>, (__gnu_cxx::_Lock_policy)2> >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundValueRef<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::allocator<Catch::clara::detail::BoundValueRef<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > >, (__gnu_cxx::_Lock_policy)2> >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::__detail::_NFA<std::__cxx11::regex_traits<char> > >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
__gnu_cxx::new_allocator<std::__detail::_StateSeq<std::__cxx11::regex_traits<char> > >::~new_allocator():
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
        -:   90:
        -:   91:      pointer
        -:   92:      address(reference __x) const _GLIBCXX_NOEXCEPT
        -:   93:      { return std::__addressof(__x); }
        -:   94:
        -:   95:      const_pointer
        -:   96:      address(const_reference __x) const _GLIBCXX_NOEXCEPT
        -:   97:      { return std::__addressof(__x); }
        -:   98:#endif
        -:   99:
        -:  100:      // NB: __n is permitted to be 0.  The C++ standard says nothing
        -:  101:      // about what the return value is when __n == 0.
        -:  102:      _GLIBCXX_NODISCARD _Tp*
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<Catch::SectionInfo>::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<Catch::(anonymous namespace)::ColumnInfo>::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<std::unique_ptr<Catch::Detail::EnumInfo, std::default_delete<Catch::Detail::EnumInfo> > >::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<std::unique_ptr<Catch::IExceptionTranslator const, std::default_delete<Catch::IExceptionTranslator const> > >::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Catch::TagInfo> > >::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<char*>::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<Catch::IReporterFactory> > > >::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<Catch::TestCaseTracking::ITracker*>::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<std::_Rb_tree_node<Catch::TestCase const*> >::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<std::unique_ptr<std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >, std::default_delete<std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> > > > >::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Catch::TagAlias> > >::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<Catch::TestSpec::FilterMatch>::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<std::shared_ptr<Catch::TestSpec::Pattern> >::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<Catch::SummaryColumn>::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<Catch::AssertionStats>::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> >::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > >::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > > >::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<std::unique_ptr<Catch::IStreamingReporter, std::default_delete<Catch::IStreamingReporter> > >::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, (__gnu_cxx::_Lock_policy)2> >::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundValueRef<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<Catch::clara::detail::BoundValueRef<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, (__gnu_cxx::_Lock_policy)2> >::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundFlagRef, std::allocator<Catch::clara::detail::BoundFlagRef>, (__gnu_cxx::_Lock_policy)2> >::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::Opt>::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<char>::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<Catch::clara::TextFlow::Column::iterator>::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<Catch::StringRef>::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<std::pair<int, Catch::StringRef> >::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<std::pair<unsigned long, Catch::TestCase const*> >::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<Catch::TestCase>::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<Catch::clara::TextFlow::Column>::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::Token>::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::HelpColumns>::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::Arg>::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<std::_Rb_tree_node<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<Catch::MessageInfo>::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<std::shared_ptr<Catch::IReporterFactory> >::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<Catch::SectionEndInfo>::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<Catch::ScopedMessage>::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<Catch::ISingleton*>::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<std::__exception_ptr::exception_ptr>::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<unsigned long>::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<std::shared_ptr<Catch::TestCaseTracking::ITracker> >::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<Catch::TestCase const*>::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<Catch::TestSpec::Filter>::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::__detail::_NFA<std::__cxx11::regex_traits<char> >, std::allocator<std::__detail::_NFA<std::__cxx11::regex_traits<char> > >, (__gnu_cxx::_Lock_policy)2> >::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#2}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#2}>, (__gnu_cxx::_Lock_policy)2> >::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#7}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#7}>, (__gnu_cxx::_Lock_policy)2> >::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#3}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#3}>, (__gnu_cxx::_Lock_policy)2> >::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#4}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#4}>, (__gnu_cxx::_Lock_policy)2> >::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#5}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#5}>, (__gnu_cxx::_Lock_policy)2> >::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#6}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#6}>, (__gnu_cxx::_Lock_policy)2> >::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundValueRef<unsigned int>, std::allocator<Catch::clara::detail::BoundValueRef<unsigned int> >, (__gnu_cxx::_Lock_policy)2> >::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundValueRef<long>, std::allocator<Catch::clara::detail::BoundValueRef<long> >, (__gnu_cxx::_Lock_policy)2> >::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<std::__detail::_StateSeq<std::__cxx11::regex_traits<char> >*>::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<std::pair<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, int> >::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<std::__detail::_StateSeq<std::__cxx11::regex_traits<char> > >::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundValueRef<double>, std::allocator<Catch::clara::detail::BoundValueRef<double> >, (__gnu_cxx::_Lock_policy)2> >::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<std::__detail::_State<char> >::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<std::pair<long, std::vector<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > > >::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<long*>::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<long>::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<std::__cxx11::regex_traits<char>::_RegexMask>::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<long const, long> > >::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<std::pair<char, char> >::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestRunStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > > > >::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode, std::allocator<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode>, (__gnu_cxx::_Lock_policy)2> >::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<std::_Rb_tree_node<Catch::Verbosity> >::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::Generators::GeneratorTracker, std::allocator<Catch::Generators::GeneratorTracker>, (__gnu_cxx::_Lock_policy)2> >::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::Config, std::allocator<Catch::Config>, (__gnu_cxx::_Lock_policy)2> >::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<std::_Rb_tree_node<Catch::TestCase> >::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::TestCaseTracking::SectionTracker, std::allocator<Catch::TestCaseTracking::SectionTracker>, (__gnu_cxx::_Lock_policy)2> >::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::TestSpec::NamePattern, std::allocator<Catch::TestSpec::NamePattern>, (__gnu_cxx::_Lock_policy)2> >::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::TestSpec::ExcludedPattern, std::allocator<Catch::TestSpec::ExcludedPattern>, (__gnu_cxx::_Lock_policy)2> >::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::TestSpec::TagPattern, std::allocator<Catch::TestSpec::TagPattern>, (__gnu_cxx::_Lock_policy)2> >::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundFlagLambda<Catch::clara::detail::Help::Help(bool&)::{lambda(bool)#1}>, std::allocator<Catch::clara::detail::Help::Help(bool&)::{lambda(bool)#1}>, (__gnu_cxx::_Lock_policy)2> >::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundFlagLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(bool)#9}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(bool)#9}>, (__gnu_cxx::_Lock_policy)2> >::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundValueRef<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::allocator<Catch::clara::detail::BoundValueRef<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > >, (__gnu_cxx::_Lock_policy)2> >::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestRunStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > >, std::allocator<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestRunStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > > >, (__gnu_cxx::_Lock_policy)2> >::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::ReporterRegistrar<Catch::CompactReporter>::ReporterFactory, std::allocator<Catch::ReporterRegistrar<Catch::CompactReporter>::ReporterFactory>, (__gnu_cxx::_Lock_policy)2> >::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::ReporterRegistrar<Catch::ConsoleReporter>::ReporterFactory, std::allocator<Catch::ReporterRegistrar<Catch::ConsoleReporter>::ReporterFactory>, (__gnu_cxx::_Lock_policy)2> >::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode>, std::allocator<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> >, (__gnu_cxx::_Lock_policy)2> >::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> >, std::allocator<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > >, (__gnu_cxx::_Lock_policy)2> >::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::ReporterRegistrar<Catch::JunitReporter>::ReporterFactory, std::allocator<Catch::ReporterRegistrar<Catch::JunitReporter>::ReporterFactory>, (__gnu_cxx::_Lock_policy)2> >::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::ReporterRegistrar<Catch::XmlReporter>::ReporterFactory, std::allocator<Catch::ReporterRegistrar<Catch::XmlReporter>::ReporterFactory>, (__gnu_cxx::_Lock_policy)2> >::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#8}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#8}>, (__gnu_cxx::_Lock_policy)2> >::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(int)#10}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(int)#10}>, (__gnu_cxx::_Lock_policy)2> >::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#1}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#1}>, (__gnu_cxx::_Lock_policy)2> >::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(bool)#11}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(bool)#11}>, (__gnu_cxx::_Lock_policy)2> >::allocate(unsigned long, void const*):
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
        -:  117:
        -:  118:      // __p is not permitted to be a null pointer.
        -:  119:      void
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > > >::deallocate(std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > >*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<Catch::(anonymous namespace)::ColumnInfo>::deallocate(Catch::(anonymous namespace)::ColumnInfo*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<Catch::SummaryColumn>::deallocate(Catch::SummaryColumn*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<std::unique_ptr<Catch::IStreamingReporter, std::default_delete<Catch::IStreamingReporter> > >::deallocate(std::unique_ptr<Catch::IStreamingReporter, std::default_delete<Catch::IStreamingReporter> >*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<std::unique_ptr<Catch::IExceptionTranslator const, std::default_delete<Catch::IExceptionTranslator const> > >::deallocate(std::unique_ptr<Catch::IExceptionTranslator const, std::default_delete<Catch::IExceptionTranslator const> >*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<char*>::deallocate(char**, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<std::shared_ptr<Catch::IReporterFactory> >::deallocate(std::shared_ptr<Catch::IReporterFactory>*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<std::__exception_ptr::exception_ptr>::deallocate(std::__exception_ptr::exception_ptr*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<Catch::SectionInfo>::deallocate(Catch::SectionInfo*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<Catch::AssertionStats>::deallocate(Catch::AssertionStats*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<std::vector<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode>, std::allocator<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > > >::deallocate(std::vector<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode>, std::allocator<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > >*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > >::deallocate(std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> >*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<std::shared_ptr<Catch::TestSpec::Pattern> >::deallocate(std::shared_ptr<Catch::TestSpec::Pattern>*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestRunStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > > > >::deallocate(std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestRunStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > > >*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> >::deallocate(std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode>*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<std::unique_ptr<Catch::Detail::EnumInfo, std::default_delete<Catch::Detail::EnumInfo> > >::deallocate(std::unique_ptr<Catch::Detail::EnumInfo, std::default_delete<Catch::Detail::EnumInfo> >*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Catch::TagInfo> > >::deallocate(std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Catch::TagInfo> >*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<std::_Rb_tree_node<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::deallocate(std::_Rb_tree_node<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<Catch::IReporterFactory> > > >::deallocate(std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<Catch::IReporterFactory> > >*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<std::_Rb_tree_node<Catch::TestCase const*> >::deallocate(std::_Rb_tree_node<Catch::TestCase const*>*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<std::unique_ptr<std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >, std::default_delete<std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> > > > >::deallocate(std::unique_ptr<std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >, std::default_delete<std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> > > >*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Catch::TagAlias> > >::deallocate(std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Catch::TagAlias> >*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<std::_Rb_tree_node<Catch::TestCase> >::deallocate(std::_Rb_tree_node<Catch::TestCase>*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<Catch::TestCase>::deallocate(Catch::TestCase*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<char>::deallocate(char*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::deallocate(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<Catch::clara::TextFlow::Column::iterator>::deallocate(Catch::clara::TextFlow::Column::iterator*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<Catch::clara::TextFlow::Column>::deallocate(Catch::clara::TextFlow::Column*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::Token>::deallocate(Catch::clara::detail::Token*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::HelpColumns>::deallocate(Catch::clara::detail::HelpColumns*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::Opt>::deallocate(Catch::clara::detail::Opt*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::Arg>::deallocate(Catch::clara::detail::Arg*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<Catch::TestSpec::Filter>::deallocate(Catch::TestSpec::Filter*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<Catch::StringRef>::deallocate(Catch::StringRef*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<std::pair<int, Catch::StringRef> >::deallocate(std::pair<int, Catch::StringRef>*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<std::_Rb_tree_node<Catch::Verbosity> >::deallocate(std::_Rb_tree_node<Catch::Verbosity>*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<unsigned long>::deallocate(unsigned long*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<Catch::MessageInfo>::deallocate(Catch::MessageInfo*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<Catch::ScopedMessage>::deallocate(Catch::ScopedMessage*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<Catch::SectionEndInfo>::deallocate(Catch::SectionEndInfo*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<Catch::TestCaseTracking::ITracker*>::deallocate(Catch::TestCaseTracking::ITracker**, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<Catch::TestSpec::FilterMatch>::deallocate(Catch::TestSpec::FilterMatch*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<Catch::ISingleton*>::deallocate(Catch::ISingleton**, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<std::pair<unsigned long, Catch::TestCase const*> >::deallocate(std::pair<unsigned long, Catch::TestCase const*>*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<std::shared_ptr<Catch::TestCaseTracking::ITracker> >::deallocate(std::shared_ptr<Catch::TestCaseTracking::ITracker>*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<Catch::TestCase const*>::deallocate(Catch::TestCase const**, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundValueRef<long>, std::allocator<Catch::clara::detail::BoundValueRef<long> >, (__gnu_cxx::_Lock_policy)2> >::deallocate(std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundValueRef<long>, std::allocator<Catch::clara::detail::BoundValueRef<long> >, (__gnu_cxx::_Lock_policy)2>*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(int)#10}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(int)#10}>, (__gnu_cxx::_Lock_policy)2> >::deallocate(__gnu_cxx::_Lock_policy*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#1}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#1}>, (__gnu_cxx::_Lock_policy)2> >::deallocate(__gnu_cxx::_Lock_policy*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(bool)#11}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(bool)#11}>, (__gnu_cxx::_Lock_policy)2> >::deallocate(__gnu_cxx::_Lock_policy*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundValueRef<double>, std::allocator<Catch::clara::detail::BoundValueRef<double> >, (__gnu_cxx::_Lock_policy)2> >::deallocate(std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundValueRef<double>, std::allocator<Catch::clara::detail::BoundValueRef<double> >, (__gnu_cxx::_Lock_policy)2>*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#2}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#2}>, (__gnu_cxx::_Lock_policy)2> >::deallocate(__gnu_cxx::_Lock_policy*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#7}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#7}>, (__gnu_cxx::_Lock_policy)2> >::deallocate(__gnu_cxx::_Lock_policy*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#3}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#3}>, (__gnu_cxx::_Lock_policy)2> >::deallocate(__gnu_cxx::_Lock_policy*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#4}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#4}>, (__gnu_cxx::_Lock_policy)2> >::deallocate(__gnu_cxx::_Lock_policy*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#5}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#5}>, (__gnu_cxx::_Lock_policy)2> >::deallocate(__gnu_cxx::_Lock_policy*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#6}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#6}>, (__gnu_cxx::_Lock_policy)2> >::deallocate(__gnu_cxx::_Lock_policy*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundValueRef<unsigned int>, std::allocator<Catch::clara::detail::BoundValueRef<unsigned int> >, (__gnu_cxx::_Lock_policy)2> >::deallocate(std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundValueRef<unsigned int>, std::allocator<Catch::clara::detail::BoundValueRef<unsigned int> >, (__gnu_cxx::_Lock_policy)2>*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#8}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#8}>, (__gnu_cxx::_Lock_policy)2> >::deallocate(__gnu_cxx::_Lock_policy*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<std::__detail::_StateSeq<std::__cxx11::regex_traits<char> > >::deallocate(std::__detail::_StateSeq<std::__cxx11::regex_traits<char> >*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::__detail::_NFA<std::__cxx11::regex_traits<char> >, std::allocator<std::__detail::_NFA<std::__cxx11::regex_traits<char> > >, (__gnu_cxx::_Lock_policy)2> >::deallocate(std::_Sp_counted_ptr_inplace<std::__detail::_NFA<std::__cxx11::regex_traits<char> >, std::allocator<std::__detail::_NFA<std::__cxx11::regex_traits<char> > >, (__gnu_cxx::_Lock_policy)2>*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<std::__detail::_State<char> >::deallocate(std::__detail::_State<char>*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<std::pair<char, char> >::deallocate(std::pair<char, char>*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<std::__cxx11::regex_traits<char>::_RegexMask>::deallocate(std::__cxx11::regex_traits<char>::_RegexMask*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::deallocate(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<long*>::deallocate(long**, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<long>::deallocate(long*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<long const, long> > >::deallocate(std::_Rb_tree_node<std::pair<long const, long> >*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode, std::allocator<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode>, (__gnu_cxx::_Lock_policy)2> >::deallocate(std::_Sp_counted_ptr_inplace<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode, std::allocator<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode>, (__gnu_cxx::_Lock_policy)2>*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundFlagLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(bool)#9}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(bool)#9}>, (__gnu_cxx::_Lock_policy)2> >::deallocate(__gnu_cxx::_Lock_policy*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::deallocate(std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, (__gnu_cxx::_Lock_policy)2> >::deallocate(std::_Sp_counted_ptr_inplace<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, (__gnu_cxx::_Lock_policy)2>*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundValueRef<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<Catch::clara::detail::BoundValueRef<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, (__gnu_cxx::_Lock_policy)2> >::deallocate(std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundValueRef<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<Catch::clara::detail::BoundValueRef<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, (__gnu_cxx::_Lock_policy)2>*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundFlagRef, std::allocator<Catch::clara::detail::BoundFlagRef>, (__gnu_cxx::_Lock_policy)2> >::deallocate(std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundFlagRef, std::allocator<Catch::clara::detail::BoundFlagRef>, (__gnu_cxx::_Lock_policy)2>*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::Generators::GeneratorTracker, std::allocator<Catch::Generators::GeneratorTracker>, (__gnu_cxx::_Lock_policy)2> >::deallocate(std::_Sp_counted_ptr_inplace<Catch::Generators::GeneratorTracker, std::allocator<Catch::Generators::GeneratorTracker>, (__gnu_cxx::_Lock_policy)2>*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::Config, std::allocator<Catch::Config>, (__gnu_cxx::_Lock_policy)2> >::deallocate(std::_Sp_counted_ptr_inplace<Catch::Config, std::allocator<Catch::Config>, (__gnu_cxx::_Lock_policy)2>*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::TestCaseTracking::SectionTracker, std::allocator<Catch::TestCaseTracking::SectionTracker>, (__gnu_cxx::_Lock_policy)2> >::deallocate(std::_Sp_counted_ptr_inplace<Catch::TestCaseTracking::SectionTracker, std::allocator<Catch::TestCaseTracking::SectionTracker>, (__gnu_cxx::_Lock_policy)2>*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::TestSpec::NamePattern, std::allocator<Catch::TestSpec::NamePattern>, (__gnu_cxx::_Lock_policy)2> >::deallocate(std::_Sp_counted_ptr_inplace<Catch::TestSpec::NamePattern, std::allocator<Catch::TestSpec::NamePattern>, (__gnu_cxx::_Lock_policy)2>*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::TestSpec::ExcludedPattern, std::allocator<Catch::TestSpec::ExcludedPattern>, (__gnu_cxx::_Lock_policy)2> >::deallocate(std::_Sp_counted_ptr_inplace<Catch::TestSpec::ExcludedPattern, std::allocator<Catch::TestSpec::ExcludedPattern>, (__gnu_cxx::_Lock_policy)2>*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::TestSpec::TagPattern, std::allocator<Catch::TestSpec::TagPattern>, (__gnu_cxx::_Lock_policy)2> >::deallocate(std::_Sp_counted_ptr_inplace<Catch::TestSpec::TagPattern, std::allocator<Catch::TestSpec::TagPattern>, (__gnu_cxx::_Lock_policy)2>*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundFlagLambda<Catch::clara::detail::Help::Help(bool&)::{lambda(bool)#1}>, std::allocator<Catch::clara::detail::Help::Help(bool&)::{lambda(bool)#1}>, (__gnu_cxx::_Lock_policy)2> >::deallocate(__gnu_cxx::_Lock_policy*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestRunStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > >, std::allocator<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestRunStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > > >, (__gnu_cxx::_Lock_policy)2> >::deallocate(std::_Sp_counted_ptr_inplace<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestRunStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > >, std::allocator<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestRunStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > > >, (__gnu_cxx::_Lock_policy)2>*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundValueRef<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::allocator<Catch::clara::detail::BoundValueRef<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > >, (__gnu_cxx::_Lock_policy)2> >::deallocate(std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundValueRef<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::allocator<Catch::clara::detail::BoundValueRef<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > >, (__gnu_cxx::_Lock_policy)2>*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<std::__detail::_StateSeq<std::__cxx11::regex_traits<char> >*>::deallocate(std::__detail::_StateSeq<std::__cxx11::regex_traits<char> >**, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<std::pair<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, int> >::deallocate(std::pair<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, int>*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<std::pair<long, std::vector<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > > >::deallocate(std::pair<long, std::vector<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::ReporterRegistrar<Catch::CompactReporter>::ReporterFactory, std::allocator<Catch::ReporterRegistrar<Catch::CompactReporter>::ReporterFactory>, (__gnu_cxx::_Lock_policy)2> >::deallocate(std::_Sp_counted_ptr_inplace<Catch::ReporterRegistrar<Catch::CompactReporter>::ReporterFactory, std::allocator<Catch::ReporterRegistrar<Catch::CompactReporter>::ReporterFactory>, (__gnu_cxx::_Lock_policy)2>*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::ReporterRegistrar<Catch::ConsoleReporter>::ReporterFactory, std::allocator<Catch::ReporterRegistrar<Catch::ConsoleReporter>::ReporterFactory>, (__gnu_cxx::_Lock_policy)2> >::deallocate(std::_Sp_counted_ptr_inplace<Catch::ReporterRegistrar<Catch::ConsoleReporter>::ReporterFactory, std::allocator<Catch::ReporterRegistrar<Catch::ConsoleReporter>::ReporterFactory>, (__gnu_cxx::_Lock_policy)2>*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode>, std::allocator<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> >, (__gnu_cxx::_Lock_policy)2> >::deallocate(std::_Sp_counted_ptr_inplace<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode>, std::allocator<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> >, (__gnu_cxx::_Lock_policy)2>*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> >, std::allocator<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > >, (__gnu_cxx::_Lock_policy)2> >::deallocate(std::_Sp_counted_ptr_inplace<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> >, std::allocator<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > >, (__gnu_cxx::_Lock_policy)2>*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::ReporterRegistrar<Catch::JunitReporter>::ReporterFactory, std::allocator<Catch::ReporterRegistrar<Catch::JunitReporter>::ReporterFactory>, (__gnu_cxx::_Lock_policy)2> >::deallocate(std::_Sp_counted_ptr_inplace<Catch::ReporterRegistrar<Catch::JunitReporter>::ReporterFactory, std::allocator<Catch::ReporterRegistrar<Catch::JunitReporter>::ReporterFactory>, (__gnu_cxx::_Lock_policy)2>*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<Catch::ReporterRegistrar<Catch::XmlReporter>::ReporterFactory, std::allocator<Catch::ReporterRegistrar<Catch::XmlReporter>::ReporterFactory>, (__gnu_cxx::_Lock_policy)2> >::deallocate(std::_Sp_counted_ptr_inplace<Catch::ReporterRegistrar<Catch::XmlReporter>::ReporterFactory, std::allocator<Catch::ReporterRegistrar<Catch::XmlReporter>::ReporterFactory>, (__gnu_cxx::_Lock_policy)2>*, unsigned long):
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
        -:  139:
        -:  140:#if __cplusplus <= 201703L
        -:  141:      size_type
    #####:  142:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  143:      { return _M_max_size(); }
------------------
__gnu_cxx::new_allocator<Catch::(anonymous namespace)::ColumnInfo>::max_size() const:
    #####:  142:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  143:      { return _M_max_size(); }
------------------
__gnu_cxx::new_allocator<std::shared_ptr<Catch::TestCaseTracking::ITracker> >::max_size() const:
    #####:  142:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  143:      { return _M_max_size(); }
------------------
__gnu_cxx::new_allocator<unsigned long>::max_size() const:
    #####:  142:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  143:      { return _M_max_size(); }
------------------
__gnu_cxx::new_allocator<std::__exception_ptr::exception_ptr>::max_size() const:
    #####:  142:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  143:      { return _M_max_size(); }
------------------
__gnu_cxx::new_allocator<Catch::ISingleton*>::max_size() const:
    #####:  142:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  143:      { return _M_max_size(); }
------------------
__gnu_cxx::new_allocator<Catch::ScopedMessage>::max_size() const:
    #####:  142:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  143:      { return _M_max_size(); }
------------------
__gnu_cxx::new_allocator<Catch::SectionEndInfo>::max_size() const:
    #####:  142:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  143:      { return _M_max_size(); }
------------------
__gnu_cxx::new_allocator<std::shared_ptr<Catch::IReporterFactory> >::max_size() const:
    #####:  142:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  143:      { return _M_max_size(); }
------------------
__gnu_cxx::new_allocator<Catch::MessageInfo>::max_size() const:
    #####:  142:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  143:      { return _M_max_size(); }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::Opt>::max_size() const:
    #####:  142:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  143:      { return _M_max_size(); }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::Arg>::max_size() const:
    #####:  142:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  143:      { return _M_max_size(); }
------------------
__gnu_cxx::new_allocator<Catch::clara::TextFlow::Column>::max_size() const:
    #####:  142:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  143:      { return _M_max_size(); }
------------------
__gnu_cxx::new_allocator<Catch::TestCase const*>::max_size() const:
    #####:  142:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  143:      { return _M_max_size(); }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::HelpColumns>::max_size() const:
    #####:  142:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  143:      { return _M_max_size(); }
------------------
__gnu_cxx::new_allocator<Catch::clara::detail::Token>::max_size() const:
    #####:  142:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  143:      { return _M_max_size(); }
------------------
__gnu_cxx::new_allocator<Catch::TestSpec::FilterMatch>::max_size() const:
    #####:  142:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  143:      { return _M_max_size(); }
------------------
__gnu_cxx::new_allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::max_size() const:
    #####:  142:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  143:      { return _M_max_size(); }
------------------
__gnu_cxx::new_allocator<Catch::TestCase>::max_size() const:
    #####:  142:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  143:      { return _M_max_size(); }
------------------
__gnu_cxx::new_allocator<std::pair<unsigned long, Catch::TestCase const*> >::max_size() const:
    #####:  142:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  143:      { return _M_max_size(); }
------------------
__gnu_cxx::new_allocator<char>::max_size() const:
    #####:  142:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  143:      { return _M_max_size(); }
------------------
__gnu_cxx::new_allocator<std::pair<int, Catch::StringRef> >::max_size() const:
    #####:  142:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  143:      { return _M_max_size(); }
------------------
__gnu_cxx::new_allocator<Catch::StringRef>::max_size() const:
    #####:  142:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  143:      { return _M_max_size(); }
------------------
__gnu_cxx::new_allocator<Catch::clara::TextFlow::Column::iterator>::max_size() const:
    #####:  142:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  143:      { return _M_max_size(); }
------------------
__gnu_cxx::new_allocator<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > >::max_size() const:
    #####:  142:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  143:      { return _M_max_size(); }
------------------
__gnu_cxx::new_allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::max_size() const:
    #####:  142:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  143:      { return _M_max_size(); }
------------------
__gnu_cxx::new_allocator<std::pair<char, char> >::max_size() const:
    #####:  142:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  143:      { return _M_max_size(); }
------------------
__gnu_cxx::new_allocator<std::__cxx11::regex_traits<char>::_RegexMask>::max_size() const:
    #####:  142:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  143:      { return _M_max_size(); }
------------------
__gnu_cxx::new_allocator<long>::max_size() const:
    #####:  142:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  143:      { return _M_max_size(); }
------------------
__gnu_cxx::new_allocator<std::pair<long, std::vector<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > > >::max_size() const:
    #####:  142:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  143:      { return _M_max_size(); }
------------------
__gnu_cxx::new_allocator<std::__detail::_State<char> >::max_size() const:
    #####:  142:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  143:      { return _M_max_size(); }
------------------
__gnu_cxx::new_allocator<std::__detail::_StateSeq<std::__cxx11::regex_traits<char> > >::max_size() const:
    #####:  142:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  143:      { return _M_max_size(); }
------------------
__gnu_cxx::new_allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::max_size() const:
    #####:  142:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  143:      { return _M_max_size(); }
------------------
__gnu_cxx::new_allocator<std::pair<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, int> >::max_size() const:
    #####:  142:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  143:      { return _M_max_size(); }
------------------
__gnu_cxx::new_allocator<std::unique_ptr<Catch::IStreamingReporter, std::default_delete<Catch::IStreamingReporter> > >::max_size() const:
    #####:  142:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  143:      { return _M_max_size(); }
------------------
__gnu_cxx::new_allocator<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > > >::max_size() const:
    #####:  142:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  143:      { return _M_max_size(); }
------------------
__gnu_cxx::new_allocator<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestRunStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > > > >::max_size() const:
    #####:  142:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  143:      { return _M_max_size(); }
------------------
__gnu_cxx::new_allocator<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> >::max_size() const:
    #####:  142:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  143:      { return _M_max_size(); }
------------------
__gnu_cxx::new_allocator<Catch::AssertionStats>::max_size() const:
    #####:  142:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  143:      { return _M_max_size(); }
------------------
__gnu_cxx::new_allocator<Catch::SummaryColumn>::max_size() const:
    #####:  142:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  143:      { return _M_max_size(); }
------------------
__gnu_cxx::new_allocator<Catch::SectionInfo>::max_size() const:
    #####:  142:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  143:      { return _M_max_size(); }
------------------
__gnu_cxx::new_allocator<std::unique_ptr<std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >, std::default_delete<std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> > > > >::max_size() const:
    #####:  142:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  143:      { return _M_max_size(); }
------------------
__gnu_cxx::new_allocator<Catch::TestCaseTracking::ITracker*>::max_size() const:
    #####:  142:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  143:      { return _M_max_size(); }
------------------
__gnu_cxx::new_allocator<std::unique_ptr<Catch::IExceptionTranslator const, std::default_delete<Catch::IExceptionTranslator const> > >::max_size() const:
    #####:  142:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  143:      { return _M_max_size(); }
------------------
__gnu_cxx::new_allocator<std::unique_ptr<Catch::Detail::EnumInfo, std::default_delete<Catch::Detail::EnumInfo> > >::max_size() const:
    #####:  142:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  143:      { return _M_max_size(); }
------------------
__gnu_cxx::new_allocator<std::shared_ptr<Catch::TestSpec::Pattern> >::max_size() const:
    #####:  142:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  143:      { return _M_max_size(); }
------------------
__gnu_cxx::new_allocator<Catch::TestSpec::Filter>::max_size() const:
    #####:  142:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  143:      { return _M_max_size(); }
------------------
        -:  144:
        -:  145:#if __cplusplus >= 201103L
        -:  146:      template<typename _Up, typename... _Args>
        -:  147:	void
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::construct<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const (&) [13]>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, char const (&) [13]):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::construct<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<std::unique_ptr<std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >, std::default_delete<std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> > > > >::construct<std::unique_ptr<std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >, std::default_delete<std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> > > >, std::unique_ptr<std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >, std::default_delete<std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> > > > >(std::unique_ptr<std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >, std::default_delete<std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> > > >*, std::unique_ptr<std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >, std::default_delete<std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> > > >&&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<Catch::SectionInfo>::construct<Catch::SectionInfo, Catch::SectionInfo const&>(Catch::SectionInfo*, Catch::SectionInfo const&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<Catch::SummaryColumn>::construct<Catch::SummaryColumn, Catch::SummaryColumn>(Catch::SummaryColumn*, Catch::SummaryColumn&&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<Catch::AssertionStats>::construct<Catch::AssertionStats, Catch::AssertionStats const&>(Catch::AssertionStats*, Catch::AssertionStats const&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> >::construct<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode>, std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> const&>(std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode>*, std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> const&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > >::construct<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> >, std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > const&>(std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> >*, std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > const&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > > >::construct<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > >, std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > > const&>(std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > >*, std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > > const&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<std::unique_ptr<Catch::IStreamingReporter, std::default_delete<Catch::IStreamingReporter> > >::construct<std::unique_ptr<Catch::IStreamingReporter, std::default_delete<Catch::IStreamingReporter> >, std::unique_ptr<Catch::IStreamingReporter, std::default_delete<Catch::IStreamingReporter> > >(std::unique_ptr<Catch::IStreamingReporter, std::default_delete<Catch::IStreamingReporter> >*, std::unique_ptr<Catch::IStreamingReporter, std::default_delete<Catch::IStreamingReporter> >&&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Catch::TagInfo> > >::construct<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Catch::TagInfo>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Catch::TagInfo> >(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Catch::TagInfo>*, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Catch::TagInfo>&&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<Catch::IReporterFactory> > > >::construct<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<Catch::IReporterFactory> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::shared_ptr<Catch::IReporterFactory> const&>(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<Catch::IReporterFactory> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::shared_ptr<Catch::IReporterFactory> const&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<std::_Rb_tree_node<Catch::TestCase const*> >::construct<Catch::TestCase const*, Catch::TestCase const*>(Catch::TestCase const**, Catch::TestCase const*&&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Catch::TagAlias> > >::construct<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Catch::TagAlias>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Catch::TagAlias> >(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Catch::TagAlias>*, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Catch::TagAlias>&&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<Catch::TestCaseTracking::ITracker*>::construct<Catch::TestCaseTracking::ITracker*, Catch::TestCaseTracking::ITracker*>(Catch::TestCaseTracking::ITracker**, Catch::TestCaseTracking::ITracker*&&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<Catch::clara::detail::BoundValueRef<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::construct<Catch::clara::detail::BoundValueRef<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>(Catch::clara::detail::BoundValueRef<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<Catch::clara::detail::BoundFlagRef>::construct<Catch::clara::detail::BoundFlagRef, bool&>(Catch::clara::detail::BoundFlagRef*, bool&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<std::pair<int, Catch::StringRef> >::construct<std::pair<int, Catch::StringRef>, std::pair<int, Catch::StringRef> >(std::pair<int, Catch::StringRef>*, std::pair<int, Catch::StringRef>&&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<std::_Rb_tree_node<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::construct<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<Catch::Generators::GeneratorTracker>::construct<Catch::Generators::GeneratorTracker, Catch::TestCaseTracking::NameAndLocation const&, Catch::TestCaseTracking::TrackerContext&, Catch::TestCaseTracking::ITracker*>(Catch::Generators::GeneratorTracker*, Catch::TestCaseTracking::NameAndLocation const&, Catch::TestCaseTracking::TrackerContext&, Catch::TestCaseTracking::ITracker*&&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<Catch::Config>::construct<Catch::Config, Catch::ConfigData&>(Catch::Config*, Catch::ConfigData&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<std::pair<unsigned long, Catch::TestCase const*> >::construct<std::pair<unsigned long, Catch::TestCase const*>, std::pair<unsigned long, Catch::TestCase const*> >(std::pair<unsigned long, Catch::TestCase const*>*, std::pair<unsigned long, Catch::TestCase const*>&&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<Catch::TestCase>::construct<Catch::TestCase, Catch::TestCase>(Catch::TestCase*, Catch::TestCase&&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<std::_Rb_tree_node<Catch::TestCase> >::construct<Catch::TestCase, Catch::TestCase const&>(Catch::TestCase*, Catch::TestCase const&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<Catch::TestCaseTracking::SectionTracker>::construct<Catch::TestCaseTracking::SectionTracker, Catch::TestCaseTracking::NameAndLocation, Catch::TestCaseTracking::TrackerContext&, decltype(nullptr)>(Catch::TestCaseTracking::SectionTracker*, Catch::TestCaseTracking::NameAndLocation&&, Catch::TestCaseTracking::TrackerContext&, decltype(nullptr)&&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<Catch::TestCaseTracking::SectionTracker>::construct<Catch::TestCaseTracking::SectionTracker, Catch::TestCaseTracking::NameAndLocation const&, Catch::TestCaseTracking::TrackerContext&, Catch::TestCaseTracking::ITracker*>(Catch::TestCaseTracking::SectionTracker*, Catch::TestCaseTracking::NameAndLocation const&, Catch::TestCaseTracking::TrackerContext&, Catch::TestCaseTracking::ITracker*&&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<Catch::TestSpec::NamePattern>::construct<Catch::TestSpec::NamePattern, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>(Catch::TestSpec::NamePattern*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<Catch::TestSpec::ExcludedPattern>::construct<Catch::TestSpec::ExcludedPattern, std::shared_ptr<Catch::TestSpec::Pattern>&>(Catch::TestSpec::ExcludedPattern*, std::shared_ptr<Catch::TestSpec::Pattern>&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<unsigned long>::construct<unsigned long, unsigned long const&>(unsigned long*, unsigned long const&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::construct<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<Catch::clara::TextFlow::Column>::construct<Catch::clara::TextFlow::Column, Catch::clara::TextFlow::Column const&>(Catch::clara::TextFlow::Column*, Catch::clara::TextFlow::Column const&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<Catch::clara::detail::Arg>::construct<Catch::clara::detail::Arg, Catch::clara::detail::Arg const&>(Catch::clara::detail::Arg*, Catch::clara::detail::Arg const&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<Catch::clara::detail::Opt>::construct<Catch::clara::detail::Opt, Catch::clara::detail::Opt const&>(Catch::clara::detail::Opt*, Catch::clara::detail::Opt const&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::construct<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const (&) [2]>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, char const (&) [2]):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<std::pair<int, Catch::StringRef> >::construct<std::pair<int, Catch::StringRef>, int&, Catch::StringRef const&>(std::pair<int, Catch::StringRef>*, int&, Catch::StringRef const&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<Catch::MessageInfo>::construct<Catch::MessageInfo, Catch::MessageInfo const&>(Catch::MessageInfo*, Catch::MessageInfo const&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<Catch::MessageInfo>::construct<Catch::MessageInfo, Catch::StringRef&, Catch::SourceLineInfo const&, Catch::ResultWas::OfType&>(Catch::MessageInfo*, Catch::StringRef&, Catch::SourceLineInfo const&, Catch::ResultWas::OfType&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<std::shared_ptr<Catch::IReporterFactory> >::construct<std::shared_ptr<Catch::IReporterFactory>, std::shared_ptr<Catch::IReporterFactory> const&>(std::shared_ptr<Catch::IReporterFactory>*, std::shared_ptr<Catch::IReporterFactory> const&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<Catch::SectionEndInfo>::construct<Catch::SectionEndInfo, Catch::SectionEndInfo const&>(Catch::SectionEndInfo*, Catch::SectionEndInfo const&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<Catch::ScopedMessage>::construct<Catch::ScopedMessage, Catch::MessageBuilder const&>(Catch::ScopedMessage*, Catch::MessageBuilder const&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<Catch::ISingleton*>::construct<Catch::ISingleton*, Catch::ISingleton* const&>(Catch::ISingleton**, Catch::ISingleton* const&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<std::__exception_ptr::exception_ptr>::construct<std::__exception_ptr::exception_ptr, std::__exception_ptr::exception_ptr const&>(std::__exception_ptr::exception_ptr*, std::__exception_ptr::exception_ptr const&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<Catch::TestSpec::TagPattern>::construct<Catch::TestSpec::TagPattern, char const (&) [2], std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>(Catch::TestSpec::TagPattern*, char const (&) [2], std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<std::pair<unsigned long, Catch::TestCase const*> >::construct<std::pair<unsigned long, Catch::TestCase const*>, unsigned int, Catch::TestCase const*>(std::pair<unsigned long, Catch::TestCase const*>*, unsigned int&&, Catch::TestCase const*&&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<Catch::TestCase>::construct<Catch::TestCase, Catch::TestCase const&>(Catch::TestCase*, Catch::TestCase const&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<std::shared_ptr<Catch::TestCaseTracking::ITracker> >::construct<std::shared_ptr<Catch::TestCaseTracking::ITracker>, std::shared_ptr<Catch::TestCaseTracking::ITracker> const&>(std::shared_ptr<Catch::TestCaseTracking::ITracker>*, std::shared_ptr<Catch::TestCaseTracking::ITracker> const&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::construct<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const (&) [1]>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, char const (&) [1]):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<Catch::TestCase const*>::construct<Catch::TestCase const*, Catch::TestCase const*>(Catch::TestCase const**, Catch::TestCase const*&&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<Catch::TestSpec::Filter>::construct<Catch::TestSpec::Filter, Catch::TestSpec::Filter const&>(Catch::TestSpec::Filter*, Catch::TestSpec::Filter const&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<std::shared_ptr<Catch::TestSpec::Pattern> >::construct<std::shared_ptr<Catch::TestSpec::Pattern>, std::shared_ptr<Catch::TestSpec::Pattern> const&>(std::shared_ptr<Catch::TestSpec::Pattern>*, std::shared_ptr<Catch::TestSpec::Pattern> const&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<Catch::clara::TextFlow::Column::iterator>::construct<Catch::clara::TextFlow::Column::iterator, Catch::clara::TextFlow::Column::iterator>(Catch::clara::TextFlow::Column::iterator*, Catch::clara::TextFlow::Column::iterator&&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<Catch::clara::detail::Token>::construct<Catch::clara::detail::Token, Catch::clara::detail::Token>(Catch::clara::detail::Token*, Catch::clara::detail::Token&&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<Catch::StringRef>::construct<Catch::StringRef, Catch::StringRef>(Catch::StringRef*, Catch::StringRef&&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<std::unique_ptr<Catch::Detail::EnumInfo, std::default_delete<Catch::Detail::EnumInfo> > >::construct<std::unique_ptr<Catch::Detail::EnumInfo, std::default_delete<Catch::Detail::EnumInfo> >, std::unique_ptr<Catch::Detail::EnumInfo, std::default_delete<Catch::Detail::EnumInfo> > >(std::unique_ptr<Catch::Detail::EnumInfo, std::default_delete<Catch::Detail::EnumInfo> >*, std::unique_ptr<Catch::Detail::EnumInfo, std::default_delete<Catch::Detail::EnumInfo> >&&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<std::unique_ptr<Catch::IExceptionTranslator const, std::default_delete<Catch::IExceptionTranslator const> > >::construct<std::unique_ptr<Catch::IExceptionTranslator const, std::default_delete<Catch::IExceptionTranslator const> >, std::unique_ptr<Catch::IExceptionTranslator const, std::default_delete<Catch::IExceptionTranslator const> > >(std::unique_ptr<Catch::IExceptionTranslator const, std::default_delete<Catch::IExceptionTranslator const> >*, std::unique_ptr<Catch::IExceptionTranslator const, std::default_delete<Catch::IExceptionTranslator const> >&&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<char>::construct<char, char const&>(char*, char const&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<std::__detail::_StateSeq<std::__cxx11::regex_traits<char> > >::construct<std::__detail::_StateSeq<std::__cxx11::regex_traits<char> >, std::__detail::_StateSeq<std::__cxx11::regex_traits<char> > >(std::__detail::_StateSeq<std::__cxx11::regex_traits<char> >*, std::__detail::_StateSeq<std::__cxx11::regex_traits<char> >&&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#7}> >::construct<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#7}, {lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#7} const&>(Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#7}*, {lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#7} const&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#3}> >::construct<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#3}, {lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#3} const&>(Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#3}*, {lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#3} const&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#4}> >::construct<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#4}, {lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#4} const&>(Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#4}*, {lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#4} const&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#5}> >::construct<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#5}, {lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#5} const&>(Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#5}*, {lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#5} const&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#6}> >::construct<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#6}, {lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#6} const&>(Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#6}*, {lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#6} const&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<Catch::clara::detail::BoundValueRef<unsigned int> >::construct<Catch::clara::detail::BoundValueRef<unsigned int>, unsigned int&>(Catch::clara::detail::BoundValueRef<unsigned int>*, unsigned int&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<Catch::clara::detail::BoundValueRef<long> >::construct<Catch::clara::detail::BoundValueRef<long>, long&>(Catch::clara::detail::BoundValueRef<long>*, long&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<Catch::SectionInfo>::construct<Catch::SectionInfo, Catch::SectionInfo>(Catch::SectionInfo*, Catch::SectionInfo&&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> >::construct<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode>, std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> >(std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode>*, std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode>&&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > >::construct<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> >, std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > >(std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> >*, std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> >&&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > > >::construct<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > >, std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > > >(std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > >*, std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > >&&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<std::__detail::_State<char> >::construct<std::__detail::_State<char>, std::__detail::_State<char> >(std::__detail::_State<char>*, std::__detail::_State<char>&&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<std::__detail::_StateSeq<std::__cxx11::regex_traits<char> > >::construct<std::__detail::_StateSeq<std::__cxx11::regex_traits<char> >, std::__detail::_StateSeq<std::__cxx11::regex_traits<char> > const&>(std::__detail::_StateSeq<std::__cxx11::regex_traits<char> >*, std::__detail::_StateSeq<std::__cxx11::regex_traits<char> > const&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#2}> >::construct<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#2}, {lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#2} const&>(Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#2}*, {lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#2} const&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<std::pair<long, std::vector<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > > >::construct<std::pair<long, std::vector<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >, long&, std::vector<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > const&>(std::pair<long, std::vector<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >*, long&, std::vector<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > const&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<std::__detail::_NFA<std::__cxx11::regex_traits<char> > >::construct<std::__detail::_NFA<std::__cxx11::regex_traits<char> >, std::locale const&, std::regex_constants::syntax_option_type&>(std::__detail::_NFA<std::__cxx11::regex_traits<char> >*, std::locale const&, std::regex_constants::syntax_option_type&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<long>::construct<long, long const&>(long*, long const&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<std::__cxx11::regex_traits<char>::_RegexMask>::construct<std::__cxx11::regex_traits<char>::_RegexMask, std::__cxx11::regex_traits<char>::_RegexMask const&>(std::__cxx11::regex_traits<char>::_RegexMask*, std::__cxx11::regex_traits<char>::_RegexMask const&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<char>::construct<char, char>(char*, char&&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<long const, long> > >::construct<std::pair<long const, long>, std::piecewise_construct_t const&, std::tuple<long const&>, std::tuple<> >(std::pair<long const, long>*, std::piecewise_construct_t const&, std::tuple<long const&>&&, std::tuple<>&&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<std::pair<char, char> >::construct<std::pair<char, char>, std::pair<char, char> >(std::pair<char, char>*, std::pair<char, char>&&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::construct<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >*, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<std::pair<long, std::vector<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > > >::construct<std::pair<long, std::vector<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >, std::pair<long, std::vector<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > > >(std::pair<long, std::vector<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >*, std::pair<long, std::vector<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >&&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<std::__cxx11::regex_traits<char>::_RegexMask>::construct<std::__cxx11::regex_traits<char>::_RegexMask, std::__cxx11::regex_traits<char>::_RegexMask>(std::__cxx11::regex_traits<char>::_RegexMask*, std::__cxx11::regex_traits<char>::_RegexMask&&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestRunStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > > > >::construct<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestRunStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > > >, std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestRunStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > > > const&>(std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestRunStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > > >*, std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestRunStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > > > const&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode>::construct<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode, Catch::SectionStats&>(Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode*, Catch::SectionStats&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestRunStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > > >::construct<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestRunStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > >, Catch::TestRunStats const&>(Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestRunStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > >*, Catch::TestRunStats const&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<Catch::TestSpec::Filter>::construct<Catch::TestSpec::Filter, Catch::TestSpec::Filter>(Catch::TestSpec::Filter*, Catch::TestSpec::Filter&&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<Catch::TestSpec::TagPattern>::construct<Catch::TestSpec::TagPattern, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>(Catch::TestSpec::TagPattern*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<Catch::clara::TextFlow::Column>::construct<Catch::clara::TextFlow::Column, Catch::clara::TextFlow::Column>(Catch::clara::TextFlow::Column*, Catch::clara::TextFlow::Column&&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<Catch::clara::detail::BoundFlagLambda<Catch::clara::detail::Help::Help(bool&)::{lambda(bool)#1}> >::construct<Catch::clara::detail::Help::Help(bool&)::{lambda(bool)#1}, {lambda(bool)#1} const&>(Catch::clara::detail::Help::Help(bool&)::{lambda(bool)#1}*, {lambda(bool)#1} const&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<Catch::clara::detail::Arg>::construct<Catch::clara::detail::Arg, Catch::clara::detail::Arg>(Catch::clara::detail::Arg*, Catch::clara::detail::Arg&&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<Catch::clara::detail::Opt>::construct<Catch::clara::detail::Opt, Catch::clara::detail::Opt>(Catch::clara::detail::Opt*, Catch::clara::detail::Opt&&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<Catch::clara::detail::BoundFlagLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(bool)#9}> >::construct<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(bool)#9}, {lambda(bool)#9} const&>(Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(bool)#9}*, {lambda(bool)#9} const&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<Catch::clara::detail::BoundValueRef<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > >::construct<Catch::clara::detail::BoundValueRef<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&>(Catch::clara::detail::BoundValueRef<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<Catch::MessageInfo>::construct<Catch::MessageInfo, Catch::MessageInfo>(Catch::MessageInfo*, Catch::MessageInfo&&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<std::shared_ptr<Catch::IReporterFactory> >::construct<std::shared_ptr<Catch::IReporterFactory>, std::shared_ptr<Catch::IReporterFactory> >(std::shared_ptr<Catch::IReporterFactory>*, std::shared_ptr<Catch::IReporterFactory>&&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<Catch::SectionEndInfo>::construct<Catch::SectionEndInfo, Catch::SectionEndInfo>(Catch::SectionEndInfo*, Catch::SectionEndInfo&&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<std::_Rb_tree_node<Catch::TestCase const*> >::construct<Catch::TestCase const*, Catch::TestCase const* const&>(Catch::TestCase const**, Catch::TestCase const* const&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<std::__exception_ptr::exception_ptr>::construct<std::__exception_ptr::exception_ptr, std::__exception_ptr::exception_ptr>(std::__exception_ptr::exception_ptr*, std::__exception_ptr::exception_ptr&&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<std::shared_ptr<Catch::TestCaseTracking::ITracker> >::construct<std::shared_ptr<Catch::TestCaseTracking::ITracker>, std::shared_ptr<Catch::TestCaseTracking::ITracker> >(std::shared_ptr<Catch::TestCaseTracking::ITracker>*, std::shared_ptr<Catch::TestCaseTracking::ITracker>&&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestRunStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > > > >::construct<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestRunStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > > >, std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestRunStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > > > >(std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestRunStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > > >*, std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestRunStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > > >&&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<std::shared_ptr<Catch::TestSpec::Pattern> >::construct<std::shared_ptr<Catch::TestSpec::Pattern>, std::shared_ptr<Catch::TestSpec::Pattern> >(std::shared_ptr<Catch::TestSpec::Pattern>*, std::shared_ptr<Catch::TestSpec::Pattern>&&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<std::_Rb_tree_node<Catch::Verbosity> >::construct<Catch::Verbosity, Catch::Verbosity const&>(Catch::Verbosity*, Catch::Verbosity const&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<Catch::ReporterRegistrar<Catch::CompactReporter>::ReporterFactory>::construct<Catch::ReporterRegistrar<Catch::CompactReporter>::ReporterFactory>(Catch::ReporterRegistrar<Catch::CompactReporter>::ReporterFactory*):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<Catch::ReporterRegistrar<Catch::ConsoleReporter>::ReporterFactory>::construct<Catch::ReporterRegistrar<Catch::ConsoleReporter>::ReporterFactory>(Catch::ReporterRegistrar<Catch::ConsoleReporter>::ReporterFactory*):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> >::construct<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode>, Catch::TestCaseStats const&>(Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode>*, Catch::TestCaseStats const&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > >::construct<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> >, Catch::TestGroupStats const&>(Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> >*, Catch::TestGroupStats const&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<Catch::ReporterRegistrar<Catch::JunitReporter>::ReporterFactory>::construct<Catch::ReporterRegistrar<Catch::JunitReporter>::ReporterFactory>(Catch::ReporterRegistrar<Catch::JunitReporter>::ReporterFactory*):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<Catch::ReporterRegistrar<Catch::XmlReporter>::ReporterFactory>::construct<Catch::ReporterRegistrar<Catch::XmlReporter>::ReporterFactory>(Catch::ReporterRegistrar<Catch::XmlReporter>::ReporterFactory*):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#8}> >::construct<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#8}, {lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#8} const&>(Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#8}*, {lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#8} const&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(int)#10}> >::construct<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(int)#10}, {lambda(int)#10} const&>(Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(int)#10}*, {lambda(int)#10} const&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#1}> >::construct<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#1}, {lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#1} const&>(Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#1}*, {lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#1} const&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(bool)#11}> >::construct<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(bool)#11}, {lambda(bool)#11} const&>(Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(bool)#11}*, {lambda(bool)#11} const&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
void __gnu_cxx::new_allocator<Catch::clara::detail::BoundValueRef<double> >::construct<Catch::clara::detail::BoundValueRef<double>, double&>(Catch::clara::detail::BoundValueRef<double>*, double&):
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
        -:  151:
        -:  152:      template<typename _Up>
        -:  153:	void
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > >::destroy<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > >(std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> >*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<std::shared_ptr<Catch::TestSpec::Pattern> >::destroy<std::shared_ptr<Catch::TestSpec::Pattern> >(std::shared_ptr<Catch::TestSpec::Pattern>*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<Catch::SectionInfo>::destroy<Catch::SectionInfo>(Catch::SectionInfo*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<Catch::clara::TextFlow::Column::iterator>::destroy<Catch::clara::TextFlow::Column::iterator>(Catch::clara::TextFlow::Column::iterator*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<Catch::StringRef>::destroy<Catch::StringRef>(Catch::StringRef*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<std::unique_ptr<Catch::Detail::EnumInfo, std::default_delete<Catch::Detail::EnumInfo> > >::destroy<std::unique_ptr<Catch::Detail::EnumInfo, std::default_delete<Catch::Detail::EnumInfo> > >(std::unique_ptr<Catch::Detail::EnumInfo, std::default_delete<Catch::Detail::EnumInfo> >*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<std::unique_ptr<Catch::IExceptionTranslator const, std::default_delete<Catch::IExceptionTranslator const> > >::destroy<std::unique_ptr<Catch::IExceptionTranslator const, std::default_delete<Catch::IExceptionTranslator const> > >(std::unique_ptr<Catch::IExceptionTranslator const, std::default_delete<Catch::IExceptionTranslator const> >*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<std::unique_ptr<std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >, std::default_delete<std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> > > > >::destroy<std::unique_ptr<std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >, std::default_delete<std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> > > > >(std::unique_ptr<std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >, std::default_delete<std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> > > >*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<Catch::SummaryColumn>::destroy<Catch::SummaryColumn>(Catch::SummaryColumn*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<Catch::AssertionStats>::destroy<Catch::AssertionStats>(Catch::AssertionStats*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> >::destroy<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> >(std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode>*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<Catch::TestSpec::Filter>::destroy<Catch::TestSpec::Filter>(Catch::TestSpec::Filter*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > > >::destroy<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > > >(std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > >*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<std::unique_ptr<Catch::IStreamingReporter, std::default_delete<Catch::IStreamingReporter> > >::destroy<std::unique_ptr<Catch::IStreamingReporter, std::default_delete<Catch::IStreamingReporter> > >(std::unique_ptr<Catch::IStreamingReporter, std::default_delete<Catch::IStreamingReporter> >*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Catch::TagInfo> > >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Catch::TagInfo> >(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Catch::TagInfo>*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<std::_Rb_tree_node<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::destroy<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<Catch::IReporterFactory> > > >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<Catch::IReporterFactory> > >(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<Catch::IReporterFactory> >*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<std::_Rb_tree_node<Catch::TestCase const*> >::destroy<Catch::TestCase const*>(Catch::TestCase const**):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Catch::TagAlias> > >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Catch::TagAlias> >(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Catch::TagAlias>*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<std::_Rb_tree_node<Catch::TestCase> >::destroy<Catch::TestCase>(Catch::TestCase*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<std::_Rb_tree_node<Catch::Verbosity> >::destroy<Catch::Verbosity>(Catch::Verbosity*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<char>::destroy<char>(char*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<Catch::TestCaseTracking::ITracker*>::destroy<Catch::TestCaseTracking::ITracker*>(Catch::TestCaseTracking::ITracker**):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<unsigned long>::destroy<unsigned long>(unsigned long*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::destroy<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<Catch::clara::TextFlow::Column>::destroy<Catch::clara::TextFlow::Column>(Catch::clara::TextFlow::Column*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<Catch::clara::detail::Token>::destroy<Catch::clara::detail::Token>(Catch::clara::detail::Token*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<Catch::clara::detail::Arg>::destroy<Catch::clara::detail::Arg>(Catch::clara::detail::Arg*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<Catch::clara::detail::Opt>::destroy<Catch::clara::detail::Opt>(Catch::clara::detail::Opt*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<std::pair<int, Catch::StringRef> >::destroy<std::pair<int, Catch::StringRef> >(std::pair<int, Catch::StringRef>*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<Catch::MessageInfo>::destroy<Catch::MessageInfo>(Catch::MessageInfo*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<std::__detail::_StateSeq<std::__cxx11::regex_traits<char> > >::destroy<std::__detail::_StateSeq<std::__cxx11::regex_traits<char> > >(std::__detail::_StateSeq<std::__cxx11::regex_traits<char> >*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<std::shared_ptr<Catch::IReporterFactory> >::destroy<std::shared_ptr<Catch::IReporterFactory> >(std::shared_ptr<Catch::IReporterFactory>*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<Catch::SectionEndInfo>::destroy<Catch::SectionEndInfo>(Catch::SectionEndInfo*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<Catch::ScopedMessage>::destroy<Catch::ScopedMessage>(Catch::ScopedMessage*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<Catch::ISingleton*>::destroy<Catch::ISingleton*>(Catch::ISingleton**):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<std::__exception_ptr::exception_ptr>::destroy<std::__exception_ptr::exception_ptr>(std::__exception_ptr::exception_ptr*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<std::pair<unsigned long, Catch::TestCase const*> >::destroy<std::pair<unsigned long, Catch::TestCase const*> >(std::pair<unsigned long, Catch::TestCase const*>*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<Catch::TestCase>::destroy<Catch::TestCase>(Catch::TestCase*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<std::shared_ptr<Catch::TestCaseTracking::ITracker> >::destroy<std::shared_ptr<Catch::TestCaseTracking::ITracker> >(std::shared_ptr<Catch::TestCaseTracking::ITracker>*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<Catch::TestCase const*>::destroy<Catch::TestCase const*>(Catch::TestCase const**):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<Catch::TestSpec::TagPattern>::destroy<Catch::TestSpec::TagPattern>(Catch::TestSpec::TagPattern*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#8}> >::destroy<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#8}>(Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#8}*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<Catch::ReporterRegistrar<Catch::XmlReporter>::ReporterFactory>::destroy<Catch::ReporterRegistrar<Catch::XmlReporter>::ReporterFactory>(Catch::ReporterRegistrar<Catch::XmlReporter>::ReporterFactory*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<Catch::ReporterRegistrar<Catch::JunitReporter>::ReporterFactory>::destroy<Catch::ReporterRegistrar<Catch::JunitReporter>::ReporterFactory>(Catch::ReporterRegistrar<Catch::JunitReporter>::ReporterFactory*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > >::destroy<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > >(Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> >*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> >::destroy<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> >(Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode>*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<Catch::ReporterRegistrar<Catch::ConsoleReporter>::ReporterFactory>::destroy<Catch::ReporterRegistrar<Catch::ConsoleReporter>::ReporterFactory>(Catch::ReporterRegistrar<Catch::ConsoleReporter>::ReporterFactory*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<Catch::ReporterRegistrar<Catch::CompactReporter>::ReporterFactory>::destroy<Catch::ReporterRegistrar<Catch::CompactReporter>::ReporterFactory>(Catch::ReporterRegistrar<Catch::CompactReporter>::ReporterFactory*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<Catch::clara::detail::BoundValueRef<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > >::destroy<Catch::clara::detail::BoundValueRef<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > >(Catch::clara::detail::BoundValueRef<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<Catch::clara::detail::BoundFlagLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(bool)#9}> >::destroy<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(bool)#9}>(Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(bool)#9}*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<Catch::clara::detail::BoundFlagLambda<Catch::clara::detail::Help::Help(bool&)::{lambda(bool)#1}> >::destroy<Catch::clara::detail::Help::Help(bool&)::{lambda(bool)#1}>(Catch::clara::detail::Help::Help(bool&)::{lambda(bool)#1}*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(int)#10}> >::destroy<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(int)#10}>(Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(int)#10}*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<Catch::TestSpec::ExcludedPattern>::destroy<Catch::TestSpec::ExcludedPattern>(Catch::TestSpec::ExcludedPattern*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<Catch::TestSpec::NamePattern>::destroy<Catch::TestSpec::NamePattern>(Catch::TestSpec::NamePattern*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<Catch::TestCaseTracking::SectionTracker>::destroy<Catch::TestCaseTracking::SectionTracker>(Catch::TestCaseTracking::SectionTracker*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<Catch::Config>::destroy<Catch::Config>(Catch::Config*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<Catch::Generators::GeneratorTracker>::destroy<Catch::Generators::GeneratorTracker>(Catch::Generators::GeneratorTracker*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<Catch::clara::detail::BoundFlagRef>::destroy<Catch::clara::detail::BoundFlagRef>(Catch::clara::detail::BoundFlagRef*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<Catch::clara::detail::BoundValueRef<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::destroy<Catch::clara::detail::BoundValueRef<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >(Catch::clara::detail::BoundValueRef<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestRunStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > > > >::destroy<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestRunStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > > > >(std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestRunStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > > >*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestRunStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > > >::destroy<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestRunStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > > >(Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestRunStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > >*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<Catch::clara::detail::BoundValueRef<unsigned int> >::destroy<Catch::clara::detail::BoundValueRef<unsigned int> >(Catch::clara::detail::BoundValueRef<unsigned int>*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<std::__detail::_State<char> >::destroy<std::__detail::_State<char> >(std::__detail::_State<char>*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<std::pair<long, std::vector<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > > >::destroy<std::pair<long, std::vector<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > > >(std::pair<long, std::vector<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<long>::destroy<long>(long*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<std::__cxx11::regex_traits<char>::_RegexMask>::destroy<std::__cxx11::regex_traits<char>::_RegexMask>(std::__cxx11::regex_traits<char>::_RegexMask*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<long const, long> > >::destroy<std::pair<long const, long> >(std::pair<long const, long>*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<std::pair<char, char> >::destroy<std::pair<char, char> >(std::pair<char, char>*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<std::__detail::_NFA<std::__cxx11::regex_traits<char> > >::destroy<std::__detail::_NFA<std::__cxx11::regex_traits<char> > >(std::__detail::_NFA<std::__cxx11::regex_traits<char> >*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<Catch::clara::detail::BoundValueRef<long> >::destroy<Catch::clara::detail::BoundValueRef<long> >(Catch::clara::detail::BoundValueRef<long>*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode>::destroy<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode>(Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#6}> >::destroy<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#6}>(Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#6}*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#5}> >::destroy<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#5}>(Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#5}*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#4}> >::destroy<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#4}>(Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#4}*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#3}> >::destroy<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#3}>(Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#3}*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#7}> >::destroy<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#7}>(Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#7}*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#2}> >::destroy<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#2}>(Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#2}*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<Catch::clara::detail::BoundValueRef<double> >::destroy<Catch::clara::detail::BoundValueRef<double> >(Catch::clara::detail::BoundValueRef<double>*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(bool)#11}> >::destroy<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(bool)#11}>(Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(bool)#11}*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
void __gnu_cxx::new_allocator<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#1}> >::destroy<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#1}>(Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#1}*):
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
        -:  157:#else
        -:  158:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  159:      // 402. wrong new expression in [some_] allocator::construct
        -:  160:      void
        -:  161:      construct(pointer __p, const _Tp& __val)
        -:  162:      { ::new((void *)__p) _Tp(__val); }
        -:  163:
        -:  164:      void
        -:  165:      destroy(pointer __p) { __p->~_Tp(); }
        -:  166:#endif
        -:  167:#endif // ! C++20
        -:  168:
        -:  169:      template<typename _Up>
        -:  170:	friend _GLIBCXX20_CONSTEXPR bool
        -:  171:	operator==(const new_allocator&, const new_allocator<_Up>&)
        -:  172:	_GLIBCXX_NOTHROW
        -:  173:	{ return true; }
        -:  174:
        -:  175:#if __cpp_impl_three_way_comparison < 201907L
        -:  176:      template<typename _Up>
        -:  177:	friend _GLIBCXX20_CONSTEXPR bool
        -:  178:	operator!=(const new_allocator&, const new_allocator<_Up>&)
        -:  179:	_GLIBCXX_NOTHROW
        -:  180:	{ return false; }
        -:  181:#endif
        -:  182:
        -:  183:    private:
        -:  184:      _GLIBCXX_CONSTEXPR size_type
    #####:  185:      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
        -:  186:      {
        -:  187:#if __PTRDIFF_MAX__ < __SIZE_MAX__
    #####:  188:	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
        -:  189:#else
        -:  190:	return std::size_t(-1) / sizeof(_Tp);
        -:  191:#endif
        -:  192:      }
        -:  193:    };
        -:  194:
        -:  195:_GLIBCXX_END_NAMESPACE_VERSION
        -:  196:} // namespace
        -:  197:
        -:  198:#endif
