        -:    0:Source:/usr/include/c++/10/bits/move.h
        -:    0:Graph:testing.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    1:// Move, forward and identity for C++11 + swap -*- C++ -*-
        -:    2:
        -:    3:// Copyright (C) 2007-2020 Free Software Foundation, Inc.
        -:    4://
        -:    5:// This file is part of the GNU ISO C++ Library.  This library is free
        -:    6:// software; you can redistribute it and/or modify it under the
        -:    7:// terms of the GNU General Public License as published by the
        -:    8:// Free Software Foundation; either version 3, or (at your option)
        -:    9:// any later version.
        -:   10:
        -:   11:// This library is distributed in the hope that it will be useful,
        -:   12:// but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   13:// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   14:// GNU General Public License for more details.
        -:   15:
        -:   16:// Under Section 7 of GPL version 3, you are granted additional
        -:   17:// permissions described in the GCC Runtime Library Exception, version
        -:   18:// 3.1, as published by the Free Software Foundation.
        -:   19:
        -:   20:// You should have received a copy of the GNU General Public License and
        -:   21:// a copy of the GCC Runtime Library Exception along with this program;
        -:   22:// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
        -:   23:// <http://www.gnu.org/licenses/>.
        -:   24:
        -:   25:/** @file bits/move.h
        -:   26: *  This is an internal header file, included by other library headers.
        -:   27: *  Do not attempt to use it directly. @headername{utility}
        -:   28: */
        -:   29:
        -:   30:#ifndef _MOVE_H
        -:   31:#define _MOVE_H 1
        -:   32:
        -:   33:#include <bits/c++config.h>
        -:   34:#if __cplusplus < 201103L
        -:   35:# include <bits/concept_check.h>
        -:   36:#endif
        -:   37:
        -:   38:namespace std _GLIBCXX_VISIBILITY(default)
        -:   39:{
        -:   40:_GLIBCXX_BEGIN_NAMESPACE_VERSION
        -:   41:
        -:   42:  // Used, in C++03 mode too, by allocators, etc.
        -:   43:  /**
        -:   44:   *  @brief Same as C++11 std::addressof
        -:   45:   *  @ingroup utilities
        -:   46:   */
        -:   47:  template<typename _Tp>
        -:   48:    inline _GLIBCXX_CONSTEXPR _Tp*
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
std::pair<unsigned long, Catch::TestCase const*>* std::__addressof<std::pair<unsigned long, Catch::TestCase const*> >(std::pair<unsigned long, Catch::TestCase const*>&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
Catch::AssertionStats* std::__addressof<Catch::AssertionStats>(Catch::AssertionStats&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
std::vector<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode>, std::allocator<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > >* std::__addressof<std::vector<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode>, std::allocator<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > > >(std::vector<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode>, std::allocator<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > >&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> >* std::__addressof<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > >(std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> >&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > >* std::__addressof<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > > >(std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > >&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestRunStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > > >* std::__addressof<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestRunStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > > > >(std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestRunStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > > >&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode>* std::__addressof<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> >(std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode>&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
std::unique_ptr<Catch::IStreamingReporter, std::default_delete<Catch::IStreamingReporter> >* std::__addressof<std::unique_ptr<Catch::IStreamingReporter, std::default_delete<Catch::IStreamingReporter> > >(std::unique_ptr<Catch::IStreamingReporter, std::default_delete<Catch::IStreamingReporter> >&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
Catch::StringRef* std::__addressof<Catch::StringRef>(Catch::StringRef&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
std::pair<int, Catch::StringRef>* std::__addressof<std::pair<int, Catch::StringRef> >(std::pair<int, Catch::StringRef>&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
std::__exception_ptr::exception_ptr* std::__addressof<std::__exception_ptr::exception_ptr>(std::__exception_ptr::exception_ptr&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
Catch::SummaryColumn* std::__addressof<Catch::SummaryColumn>(Catch::SummaryColumn&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
std::unique_ptr<Catch::Detail::EnumInfo, std::default_delete<Catch::Detail::EnumInfo> >* std::__addressof<std::unique_ptr<Catch::Detail::EnumInfo, std::default_delete<Catch::Detail::EnumInfo> > >(std::unique_ptr<Catch::Detail::EnumInfo, std::default_delete<Catch::Detail::EnumInfo> >&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
std::unique_ptr<std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >, std::default_delete<std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> > > >* std::__addressof<std::unique_ptr<std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >, std::default_delete<std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> > > > >(std::unique_ptr<std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >, std::default_delete<std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> > > >&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >* std::__addressof<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >(std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
std::allocator<std::_Sp_counted_ptr_inplace<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, (__gnu_cxx::_Lock_policy)2> >* std::__addressof<std::allocator<std::_Sp_counted_ptr_inplace<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, (__gnu_cxx::_Lock_policy)2> > >(std::allocator<std::_Sp_counted_ptr_inplace<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, (__gnu_cxx::_Lock_policy)2> >&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
std::allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundValueRef<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<Catch::clara::detail::BoundValueRef<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, (__gnu_cxx::_Lock_policy)2> >* std::__addressof<std::allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundValueRef<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<Catch::clara::detail::BoundValueRef<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, (__gnu_cxx::_Lock_policy)2> > >(std::allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundValueRef<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<Catch::clara::detail::BoundValueRef<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, (__gnu_cxx::_Lock_policy)2> >&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
std::allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundFlagRef, std::allocator<Catch::clara::detail::BoundFlagRef>, (__gnu_cxx::_Lock_policy)2> >* std::__addressof<std::allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundFlagRef, std::allocator<Catch::clara::detail::BoundFlagRef>, (__gnu_cxx::_Lock_policy)2> > >(std::allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundFlagRef, std::allocator<Catch::clara::detail::BoundFlagRef>, (__gnu_cxx::_Lock_policy)2> >&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
std::allocator<std::_Sp_counted_ptr_inplace<Catch::Generators::GeneratorTracker, std::allocator<Catch::Generators::GeneratorTracker>, (__gnu_cxx::_Lock_policy)2> >* std::__addressof<std::allocator<std::_Sp_counted_ptr_inplace<Catch::Generators::GeneratorTracker, std::allocator<Catch::Generators::GeneratorTracker>, (__gnu_cxx::_Lock_policy)2> > >(std::allocator<std::_Sp_counted_ptr_inplace<Catch::Generators::GeneratorTracker, std::allocator<Catch::Generators::GeneratorTracker>, (__gnu_cxx::_Lock_policy)2> >&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
std::allocator<std::_Sp_counted_ptr_inplace<Catch::Config, std::allocator<Catch::Config>, (__gnu_cxx::_Lock_policy)2> >* std::__addressof<std::allocator<std::_Sp_counted_ptr_inplace<Catch::Config, std::allocator<Catch::Config>, (__gnu_cxx::_Lock_policy)2> > >(std::allocator<std::_Sp_counted_ptr_inplace<Catch::Config, std::allocator<Catch::Config>, (__gnu_cxx::_Lock_policy)2> >&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
std::allocator<std::_Sp_counted_ptr_inplace<Catch::TestCaseTracking::SectionTracker, std::allocator<Catch::TestCaseTracking::SectionTracker>, (__gnu_cxx::_Lock_policy)2> >* std::__addressof<std::allocator<std::_Sp_counted_ptr_inplace<Catch::TestCaseTracking::SectionTracker, std::allocator<Catch::TestCaseTracking::SectionTracker>, (__gnu_cxx::_Lock_policy)2> > >(std::allocator<std::_Sp_counted_ptr_inplace<Catch::TestCaseTracking::SectionTracker, std::allocator<Catch::TestCaseTracking::SectionTracker>, (__gnu_cxx::_Lock_policy)2> >&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
std::allocator<std::_Sp_counted_ptr_inplace<Catch::TestSpec::NamePattern, std::allocator<Catch::TestSpec::NamePattern>, (__gnu_cxx::_Lock_policy)2> >* std::__addressof<std::allocator<std::_Sp_counted_ptr_inplace<Catch::TestSpec::NamePattern, std::allocator<Catch::TestSpec::NamePattern>, (__gnu_cxx::_Lock_policy)2> > >(std::allocator<std::_Sp_counted_ptr_inplace<Catch::TestSpec::NamePattern, std::allocator<Catch::TestSpec::NamePattern>, (__gnu_cxx::_Lock_policy)2> >&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
std::unique_ptr<Catch::IExceptionTranslator const, std::default_delete<Catch::IExceptionTranslator const> >* std::__addressof<std::unique_ptr<Catch::IExceptionTranslator const, std::default_delete<Catch::IExceptionTranslator const> > >(std::unique_ptr<Catch::IExceptionTranslator const, std::default_delete<Catch::IExceptionTranslator const> >&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
std::ostream* std::__addressof<std::ostream>(std::ostream&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >* std::__addressof<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
Catch::clara::TextFlow::Column::iterator* std::__addressof<Catch::clara::TextFlow::Column::iterator>(Catch::clara::TextFlow::Column::iterator&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
Catch::clara::TextFlow::Column* std::__addressof<Catch::clara::TextFlow::Column>(Catch::clara::TextFlow::Column&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
Catch::clara::detail::Token* std::__addressof<Catch::clara::detail::Token>(Catch::clara::detail::Token&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
Catch::clara::detail::HelpColumns* std::__addressof<Catch::clara::detail::HelpColumns>(Catch::clara::detail::HelpColumns&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
Catch::clara::detail::Opt* std::__addressof<Catch::clara::detail::Opt>(Catch::clara::detail::Opt&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
Catch::clara::detail::Arg* std::__addressof<Catch::clara::detail::Arg>(Catch::clara::detail::Arg&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
Catch::TestSpec::Filter* std::__addressof<Catch::TestSpec::Filter>(Catch::TestSpec::Filter&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
std::shared_ptr<Catch::TestSpec::Pattern>* std::__addressof<std::shared_ptr<Catch::TestSpec::Pattern> >(std::shared_ptr<Catch::TestSpec::Pattern>&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
std::allocator<std::_Sp_counted_ptr_inplace<Catch::TestSpec::ExcludedPattern, std::allocator<Catch::TestSpec::ExcludedPattern>, (__gnu_cxx::_Lock_policy)2> >* std::__addressof<std::allocator<std::_Sp_counted_ptr_inplace<Catch::TestSpec::ExcludedPattern, std::allocator<Catch::TestSpec::ExcludedPattern>, (__gnu_cxx::_Lock_policy)2> > >(std::allocator<std::_Sp_counted_ptr_inplace<Catch::TestSpec::ExcludedPattern, std::allocator<Catch::TestSpec::ExcludedPattern>, (__gnu_cxx::_Lock_policy)2> >&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
Catch::MessageInfo* std::__addressof<Catch::MessageInfo>(Catch::MessageInfo&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
Catch::TestCase* std::__addressof<Catch::TestCase>(Catch::TestCase&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
char const* std::__addressof<char const>(char const&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
std::shared_ptr<Catch::IReporterFactory>* std::__addressof<std::shared_ptr<Catch::IReporterFactory> >(std::shared_ptr<Catch::IReporterFactory>&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
std::shared_ptr<Catch::TestCaseTracking::ITracker>* std::__addressof<std::shared_ptr<Catch::TestCaseTracking::ITracker> >(std::shared_ptr<Catch::TestCaseTracking::ITracker>&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
Catch::ScopedMessage* std::__addressof<Catch::ScopedMessage>(Catch::ScopedMessage&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
Catch::SectionEndInfo* std::__addressof<Catch::SectionEndInfo>(Catch::SectionEndInfo&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
Catch::TestSpec::FilterMatch* std::__addressof<Catch::TestSpec::FilterMatch>(Catch::TestSpec::FilterMatch&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
Catch::SectionInfo* std::__addressof<Catch::SectionInfo>(Catch::SectionInfo&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
Catch::(anonymous namespace)::ColumnInfo* std::__addressof<Catch::(anonymous namespace)::ColumnInfo>(Catch::(anonymous namespace)::ColumnInfo&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, true, false, true> const* std::__addressof<std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, true, false, true> const>(std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, true, false, true> const&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
std::allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundValueRef<unsigned int>, std::allocator<Catch::clara::detail::BoundValueRef<unsigned int> >, (__gnu_cxx::_Lock_policy)2> >* std::__addressof<std::allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundValueRef<unsigned int>, std::allocator<Catch::clara::detail::BoundValueRef<unsigned int> >, (__gnu_cxx::_Lock_policy)2> > >(std::allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundValueRef<unsigned int>, std::allocator<Catch::clara::detail::BoundValueRef<unsigned int> >, (__gnu_cxx::_Lock_policy)2> >&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
std::allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundValueRef<long>, std::allocator<Catch::clara::detail::BoundValueRef<long> >, (__gnu_cxx::_Lock_policy)2> >* std::__addressof<std::allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundValueRef<long>, std::allocator<Catch::clara::detail::BoundValueRef<long> >, (__gnu_cxx::_Lock_policy)2> > >(std::allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundValueRef<long>, std::allocator<Catch::clara::detail::BoundValueRef<long> >, (__gnu_cxx::_Lock_policy)2> >&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
std::pair<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, int>* std::__addressof<std::pair<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, int> >(std::pair<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, int>&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
std::allocator<std::_Sp_counted_ptr_inplace<std::__detail::_NFA<std::__cxx11::regex_traits<char> >, std::allocator<std::__detail::_NFA<std::__cxx11::regex_traits<char> > >, (__gnu_cxx::_Lock_policy)2> >* std::__addressof<std::allocator<std::_Sp_counted_ptr_inplace<std::__detail::_NFA<std::__cxx11::regex_traits<char> >, std::allocator<std::__detail::_NFA<std::__cxx11::regex_traits<char> > >, (__gnu_cxx::_Lock_policy)2> > >(std::allocator<std::_Sp_counted_ptr_inplace<std::__detail::_NFA<std::__cxx11::regex_traits<char> >, std::allocator<std::__detail::_NFA<std::__cxx11::regex_traits<char> > >, (__gnu_cxx::_Lock_policy)2> >&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
std::__detail::_State<char>* std::__addressof<std::__detail::_State<char> >(std::__detail::_State<char>&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, false, false, false> const* std::__addressof<std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, false, false, false> const>(std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, false, false, false> const&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, false, false, true> const* std::__addressof<std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, false, false, true> const>(std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, false, false, true> const&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, false, true, false> const* std::__addressof<std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, false, true, false> const>(std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, false, true, false> const&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, false, true, true> const* std::__addressof<std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, false, true, true> const>(std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, false, true, true> const&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, true, false, false> const* std::__addressof<std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, true, false, false> const>(std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, true, false, false> const&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
std::allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#6}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#6}>, (__gnu_cxx::_Lock_policy)2> >* std::__addressof<std::allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#6}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#6}>, (__gnu_cxx::_Lock_policy)2> > >(std::allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#6}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#6}>, (__gnu_cxx::_Lock_policy)2> >&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, true, true, false> const* std::__addressof<std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, true, true, false> const>(std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, true, true, false> const&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, true, true, true> const* std::__addressof<std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, true, true, true> const>(std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, true, true, true> const&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
std::__detail::_CharMatcher<std::__cxx11::regex_traits<char>, false, false> const* std::__addressof<std::__detail::_CharMatcher<std::__cxx11::regex_traits<char>, false, false> const>(std::__detail::_CharMatcher<std::__cxx11::regex_traits<char>, false, false> const&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
std::__detail::_CharMatcher<std::__cxx11::regex_traits<char>, false, true> const* std::__addressof<std::__detail::_CharMatcher<std::__cxx11::regex_traits<char>, false, true> const>(std::__detail::_CharMatcher<std::__cxx11::regex_traits<char>, false, true> const&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
std::__detail::_CharMatcher<std::__cxx11::regex_traits<char>, true, false> const* std::__addressof<std::__detail::_CharMatcher<std::__cxx11::regex_traits<char>, true, false> const>(std::__detail::_CharMatcher<std::__cxx11::regex_traits<char>, true, false> const&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
std::__detail::_CharMatcher<std::__cxx11::regex_traits<char>, true, true> const* std::__addressof<std::__detail::_CharMatcher<std::__cxx11::regex_traits<char>, true, true> const>(std::__detail::_CharMatcher<std::__cxx11::regex_traits<char>, true, true> const&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >* std::__addressof<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
std::__cxx11::regex_traits<char>::_RegexMask* std::__addressof<std::__cxx11::regex_traits<char>::_RegexMask>(std::__cxx11::regex_traits<char>::_RegexMask&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
std::pair<char, char>* std::__addressof<std::pair<char, char> >(std::pair<char, char>&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
std::allocator<std::_Sp_counted_ptr_inplace<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode, std::allocator<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode>, (__gnu_cxx::_Lock_policy)2> >* std::__addressof<std::allocator<std::_Sp_counted_ptr_inplace<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode, std::allocator<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode>, (__gnu_cxx::_Lock_policy)2> > >(std::allocator<std::_Sp_counted_ptr_inplace<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode, std::allocator<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode>, (__gnu_cxx::_Lock_policy)2> >&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
std::allocator<std::_Sp_counted_ptr_inplace<Catch::ReporterRegistrar<Catch::XmlReporter>::ReporterFactory, std::allocator<Catch::ReporterRegistrar<Catch::XmlReporter>::ReporterFactory>, (__gnu_cxx::_Lock_policy)2> >* std::__addressof<std::allocator<std::_Sp_counted_ptr_inplace<Catch::ReporterRegistrar<Catch::XmlReporter>::ReporterFactory, std::allocator<Catch::ReporterRegistrar<Catch::XmlReporter>::ReporterFactory>, (__gnu_cxx::_Lock_policy)2> > >(std::allocator<std::_Sp_counted_ptr_inplace<Catch::ReporterRegistrar<Catch::XmlReporter>::ReporterFactory, std::allocator<Catch::ReporterRegistrar<Catch::XmlReporter>::ReporterFactory>, (__gnu_cxx::_Lock_policy)2> >&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
std::allocator<std::_Sp_counted_ptr_inplace<Catch::TestSpec::TagPattern, std::allocator<Catch::TestSpec::TagPattern>, (__gnu_cxx::_Lock_policy)2> >* std::__addressof<std::allocator<std::_Sp_counted_ptr_inplace<Catch::TestSpec::TagPattern, std::allocator<Catch::TestSpec::TagPattern>, (__gnu_cxx::_Lock_policy)2> > >(std::allocator<std::_Sp_counted_ptr_inplace<Catch::TestSpec::TagPattern, std::allocator<Catch::TestSpec::TagPattern>, (__gnu_cxx::_Lock_policy)2> >&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
std::allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundFlagLambda<Catch::clara::detail::Help::Help(bool&)::{lambda(bool)#1}>, std::allocator<Catch::clara::detail::Help::Help(bool&)::{lambda(bool)#1}>, (__gnu_cxx::_Lock_policy)2> >* std::__addressof<std::allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundFlagLambda<Catch::clara::detail::Help::Help(bool&)::{lambda(bool)#1}>, std::allocator<Catch::clara::detail::Help::Help(bool&)::{lambda(bool)#1}>, (__gnu_cxx::_Lock_policy)2> > >(std::allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundFlagLambda<Catch::clara::detail::Help::Help(bool&)::{lambda(bool)#1}>, std::allocator<Catch::clara::detail::Help::Help(bool&)::{lambda(bool)#1}>, (__gnu_cxx::_Lock_policy)2> >&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
std::allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundFlagLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(bool)#9}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(bool)#9}>, (__gnu_cxx::_Lock_policy)2> >* std::__addressof<std::allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundFlagLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(bool)#9}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(bool)#9}>, (__gnu_cxx::_Lock_policy)2> > >(std::allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundFlagLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(bool)#9}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(bool)#9}>, (__gnu_cxx::_Lock_policy)2> >&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
std::allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundValueRef<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::allocator<Catch::clara::detail::BoundValueRef<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > >, (__gnu_cxx::_Lock_policy)2> >* std::__addressof<std::allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundValueRef<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::allocator<Catch::clara::detail::BoundValueRef<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > >, (__gnu_cxx::_Lock_policy)2> > >(std::allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundValueRef<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::allocator<Catch::clara::detail::BoundValueRef<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > >, (__gnu_cxx::_Lock_policy)2> >&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
std::pair<long, std::vector<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >* std::__addressof<std::pair<long, std::vector<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > > >(std::pair<long, std::vector<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
std::allocator<std::_Sp_counted_ptr_inplace<Catch::ReporterRegistrar<Catch::CompactReporter>::ReporterFactory, std::allocator<Catch::ReporterRegistrar<Catch::CompactReporter>::ReporterFactory>, (__gnu_cxx::_Lock_policy)2> >* std::__addressof<std::allocator<std::_Sp_counted_ptr_inplace<Catch::ReporterRegistrar<Catch::CompactReporter>::ReporterFactory, std::allocator<Catch::ReporterRegistrar<Catch::CompactReporter>::ReporterFactory>, (__gnu_cxx::_Lock_policy)2> > >(std::allocator<std::_Sp_counted_ptr_inplace<Catch::ReporterRegistrar<Catch::CompactReporter>::ReporterFactory, std::allocator<Catch::ReporterRegistrar<Catch::CompactReporter>::ReporterFactory>, (__gnu_cxx::_Lock_policy)2> >&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
std::allocator<std::_Sp_counted_ptr_inplace<Catch::ReporterRegistrar<Catch::ConsoleReporter>::ReporterFactory, std::allocator<Catch::ReporterRegistrar<Catch::ConsoleReporter>::ReporterFactory>, (__gnu_cxx::_Lock_policy)2> >* std::__addressof<std::allocator<std::_Sp_counted_ptr_inplace<Catch::ReporterRegistrar<Catch::ConsoleReporter>::ReporterFactory, std::allocator<Catch::ReporterRegistrar<Catch::ConsoleReporter>::ReporterFactory>, (__gnu_cxx::_Lock_policy)2> > >(std::allocator<std::_Sp_counted_ptr_inplace<Catch::ReporterRegistrar<Catch::ConsoleReporter>::ReporterFactory, std::allocator<Catch::ReporterRegistrar<Catch::ConsoleReporter>::ReporterFactory>, (__gnu_cxx::_Lock_policy)2> >&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
std::allocator<std::_Sp_counted_ptr_inplace<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode>, std::allocator<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> >, (__gnu_cxx::_Lock_policy)2> >* std::__addressof<std::allocator<std::_Sp_counted_ptr_inplace<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode>, std::allocator<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> >, (__gnu_cxx::_Lock_policy)2> > >(std::allocator<std::_Sp_counted_ptr_inplace<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode>, std::allocator<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> >, (__gnu_cxx::_Lock_policy)2> >&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
std::allocator<std::_Sp_counted_ptr_inplace<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> >, std::allocator<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > >, (__gnu_cxx::_Lock_policy)2> >* std::__addressof<std::allocator<std::_Sp_counted_ptr_inplace<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> >, std::allocator<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > >, (__gnu_cxx::_Lock_policy)2> > >(std::allocator<std::_Sp_counted_ptr_inplace<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> >, std::allocator<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > >, (__gnu_cxx::_Lock_policy)2> >&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
std::allocator<std::_Sp_counted_ptr_inplace<Catch::ReporterRegistrar<Catch::JunitReporter>::ReporterFactory, std::allocator<Catch::ReporterRegistrar<Catch::JunitReporter>::ReporterFactory>, (__gnu_cxx::_Lock_policy)2> >* std::__addressof<std::allocator<std::_Sp_counted_ptr_inplace<Catch::ReporterRegistrar<Catch::JunitReporter>::ReporterFactory, std::allocator<Catch::ReporterRegistrar<Catch::JunitReporter>::ReporterFactory>, (__gnu_cxx::_Lock_policy)2> > >(std::allocator<std::_Sp_counted_ptr_inplace<Catch::ReporterRegistrar<Catch::JunitReporter>::ReporterFactory, std::allocator<Catch::ReporterRegistrar<Catch::JunitReporter>::ReporterFactory>, (__gnu_cxx::_Lock_policy)2> >&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
std::allocator<std::_Sp_counted_ptr_inplace<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestRunStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > >, std::allocator<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestRunStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > > >, (__gnu_cxx::_Lock_policy)2> >* std::__addressof<std::allocator<std::_Sp_counted_ptr_inplace<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestRunStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > >, std::allocator<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestRunStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > > >, (__gnu_cxx::_Lock_policy)2> > >(std::allocator<std::_Sp_counted_ptr_inplace<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestRunStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > >, std::allocator<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestRunStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > > >, (__gnu_cxx::_Lock_policy)2> >&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
std::allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#8}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#8}>, (__gnu_cxx::_Lock_policy)2> >* std::__addressof<std::allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#8}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#8}>, (__gnu_cxx::_Lock_policy)2> > >(std::allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#8}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#8}>, (__gnu_cxx::_Lock_policy)2> >&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
std::allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(int)#10}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(int)#10}>, (__gnu_cxx::_Lock_policy)2> >* std::__addressof<std::allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(int)#10}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(int)#10}>, (__gnu_cxx::_Lock_policy)2> > >(std::allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(int)#10}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(int)#10}>, (__gnu_cxx::_Lock_policy)2> >&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
std::allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#1}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#1}>, (__gnu_cxx::_Lock_policy)2> >* std::__addressof<std::allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#1}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#1}>, (__gnu_cxx::_Lock_policy)2> > >(std::allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#1}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#1}>, (__gnu_cxx::_Lock_policy)2> >&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
std::allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(bool)#11}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(bool)#11}>, (__gnu_cxx::_Lock_policy)2> >* std::__addressof<std::allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(bool)#11}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(bool)#11}>, (__gnu_cxx::_Lock_policy)2> > >(std::allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(bool)#11}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(bool)#11}>, (__gnu_cxx::_Lock_policy)2> >&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
std::allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundValueRef<double>, std::allocator<Catch::clara::detail::BoundValueRef<double> >, (__gnu_cxx::_Lock_policy)2> >* std::__addressof<std::allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundValueRef<double>, std::allocator<Catch::clara::detail::BoundValueRef<double> >, (__gnu_cxx::_Lock_policy)2> > >(std::allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundValueRef<double>, std::allocator<Catch::clara::detail::BoundValueRef<double> >, (__gnu_cxx::_Lock_policy)2> >&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
std::allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#2}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#2}>, (__gnu_cxx::_Lock_policy)2> >* std::__addressof<std::allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#2}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#2}>, (__gnu_cxx::_Lock_policy)2> > >(std::allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#2}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#2}>, (__gnu_cxx::_Lock_policy)2> >&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
std::allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#7}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#7}>, (__gnu_cxx::_Lock_policy)2> >* std::__addressof<std::allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#7}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#7}>, (__gnu_cxx::_Lock_policy)2> > >(std::allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#7}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#7}>, (__gnu_cxx::_Lock_policy)2> >&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
std::allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#3}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#3}>, (__gnu_cxx::_Lock_policy)2> >* std::__addressof<std::allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#3}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#3}>, (__gnu_cxx::_Lock_policy)2> > >(std::allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#3}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#3}>, (__gnu_cxx::_Lock_policy)2> >&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
std::allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#4}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#4}>, (__gnu_cxx::_Lock_policy)2> >* std::__addressof<std::allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#4}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#4}>, (__gnu_cxx::_Lock_policy)2> > >(std::allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#4}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#4}>, (__gnu_cxx::_Lock_policy)2> >&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
std::allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#5}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#5}>, (__gnu_cxx::_Lock_policy)2> >* std::__addressof<std::allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#5}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#5}>, (__gnu_cxx::_Lock_policy)2> > >(std::allocator<std::_Sp_counted_ptr_inplace<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#5}>, std::allocator<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#5}>, (__gnu_cxx::_Lock_policy)2> >&):
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
        -:   51:
        -:   52:#if __cplusplus >= 201103L
        -:   53:
        -:   54:_GLIBCXX_END_NAMESPACE_VERSION
        -:   55:} // namespace
        -:   56:
        -:   57:#include <type_traits> // Brings in std::declval too.
        -:   58:
        -:   59:namespace std _GLIBCXX_VISIBILITY(default)
        -:   60:{
        -:   61:_GLIBCXX_BEGIN_NAMESPACE_VERSION
        -:   62:
        -:   63:  /**
        -:   64:   *  @addtogroup utilities
        -:   65:   *  @{
        -:   66:   */
        -:   67:
        -:   68:  /**
        -:   69:   *  @brief  Forward an lvalue.
        -:   70:   *  @return The parameter cast to the specified type.
        -:   71:   *
        -:   72:   *  This function is used to implement "perfect forwarding".
        -:   73:   */
        -:   74:  template<typename _Tp>
        -:   75:    constexpr _Tp&&
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::_Rb_tree_iterator<Catch::TestCase>& std::forward<std::_Rb_tree_iterator<Catch::TestCase>&>(std::remove_reference<std::_Rb_tree_iterator<Catch::TestCase>&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#1} const& std::forward<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#1} const&>(std::remove_reference<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#1} const&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(int)#10} const& std::forward<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(int)#10} const&>(std::remove_reference<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(int)#10} const&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#8} const& std::forward<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#8} const&>(std::remove_reference<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#8} const&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::unique_ptr<Catch::IStreamingReporter, std::default_delete<Catch::IStreamingReporter> >&& std::forward<std::unique_ptr<Catch::IStreamingReporter, std::default_delete<Catch::IStreamingReporter> > >(std::remove_reference<std::unique_ptr<Catch::IStreamingReporter, std::default_delete<Catch::IStreamingReporter> > >::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
Catch::TestGroupStats const& std::forward<Catch::TestGroupStats const&>(std::remove_reference<Catch::TestGroupStats const&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
Catch::TestCaseStats const& std::forward<Catch::TestCaseStats const&>(std::remove_reference<Catch::TestCaseStats const&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
Catch::SummaryColumn&& std::forward<Catch::SummaryColumn>(std::remove_reference<Catch::SummaryColumn>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::shared_ptr<Catch::TestSpec::Pattern> const& std::forward<std::shared_ptr<Catch::TestSpec::Pattern> const&>(std::remove_reference<std::shared_ptr<Catch::TestSpec::Pattern> const&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
Catch::TestSpec::Filter const& std::forward<Catch::TestSpec::Filter const&>(std::remove_reference<Catch::TestSpec::Filter const&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::shared_ptr<Catch::TestCaseTracking::ITracker> const& std::forward<std::shared_ptr<Catch::TestCaseTracking::ITracker> const&>(std::remove_reference<std::shared_ptr<Catch::TestCaseTracking::ITracker> const&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(bool)#11} const& std::forward<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(bool)#11} const&>(std::remove_reference<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(bool)#11} const&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
unsigned long const& std::forward<unsigned long const&>(std::remove_reference<unsigned long const&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::unique_ptr<std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >, std::default_delete<std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> > > >&& std::forward<std::unique_ptr<std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >, std::default_delete<std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> > > > >(std::remove_reference<std::unique_ptr<std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >, std::default_delete<std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> > > > >::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::__exception_ptr::exception_ptr const& std::forward<std::__exception_ptr::exception_ptr const&>(std::remove_reference<std::__exception_ptr::exception_ptr const&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
Catch::ISingleton* const& std::forward<Catch::ISingleton* const&>(std::remove_reference<Catch::ISingleton* const&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&& std::forward<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::remove_reference<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
bool&& std::forward<bool>(std::remove_reference<bool>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::_Rb_tree_iterator<Catch::TestCase const*>&& std::forward<std::_Rb_tree_iterator<Catch::TestCase const*> >(std::remove_reference<std::_Rb_tree_iterator<Catch::TestCase const*> >::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
Catch::SectionEndInfo const& std::forward<Catch::SectionEndInfo const&>(std::remove_reference<Catch::SectionEndInfo const&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::_Rb_tree_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >& std::forward<std::_Rb_tree_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&>(std::remove_reference<std::_Rb_tree_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
Catch::MessageInfo const& std::forward<Catch::MessageInfo const&>(std::remove_reference<Catch::MessageInfo const&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::_Rb_tree_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&& std::forward<std::_Rb_tree_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >(std::remove_reference<std::_Rb_tree_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> const& std::forward<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> const&>(std::remove_reference<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> const&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
Catch::AssertionStats const& std::forward<Catch::AssertionStats const&>(std::remove_reference<Catch::AssertionStats const&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
Catch::SectionInfo const& std::forward<Catch::SectionInfo const&>(std::remove_reference<Catch::SectionInfo const&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
Catch::Verbosity const& std::forward<Catch::Verbosity const&>(std::remove_reference<Catch::Verbosity const&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::_Rb_tree_iterator<Catch::TestCase>&& std::forward<std::_Rb_tree_iterator<Catch::TestCase> >(std::remove_reference<std::_Rb_tree_iterator<Catch::TestCase> >::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::_Rb_tree_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Catch::TagAlias> >&& std::forward<std::_Rb_tree_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Catch::TagAlias> > >(std::remove_reference<std::_Rb_tree_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Catch::TagAlias> > >::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
Catch::TestCase const* const& std::forward<Catch::TestCase const* const&>(std::remove_reference<Catch::TestCase const* const&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::_Rb_tree_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<Catch::IReporterFactory> > >&& std::forward<std::_Rb_tree_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<Catch::IReporterFactory> > > >(std::remove_reference<std::_Rb_tree_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<Catch::IReporterFactory> > > >::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
char const& std::forward<char const&>(std::remove_reference<char const&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::_Rb_tree_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Catch::TagInfo> >&& std::forward<std::_Rb_tree_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Catch::TagInfo> > >(std::remove_reference<std::_Rb_tree_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Catch::TagInfo> > >::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
Catch::IStreamingReporter*&& std::forward<Catch::IStreamingReporter*>(std::remove_reference<Catch::IStreamingReporter*>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::default_delete<Catch::Detail::EnumInfo>&& std::forward<std::default_delete<Catch::Detail::EnumInfo> >(std::remove_reference<std::default_delete<Catch::Detail::EnumInfo> >::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
long& std::forward<long&>(std::remove_reference<long&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
unsigned int& std::forward<unsigned int&>(std::remove_reference<unsigned int&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#6} const& std::forward<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#6} const&>(std::remove_reference<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#6} const&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#5} const& std::forward<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#5} const&>(std::remove_reference<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#5} const&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#4} const& std::forward<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#4} const&>(std::remove_reference<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#4} const&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#3} const& std::forward<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#3} const&>(std::remove_reference<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#3} const&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#7} const& std::forward<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#7} const&>(std::remove_reference<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#7} const&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#2} const& std::forward<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#2} const&>(std::remove_reference<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#2} const&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
double& std::forward<double&>(std::remove_reference<double&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
Catch::SourceLineInfo const& std::forward<Catch::SourceLineInfo const&>(std::remove_reference<Catch::SourceLineInfo const&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
Catch::ConfigData& std::forward<Catch::ConfigData&>(std::remove_reference<Catch::ConfigData&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
Catch::TestCase const*&& std::forward<Catch::TestCase const*>(std::remove_reference<Catch::TestCase const*>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
Catch::MessageBuilder const& std::forward<Catch::MessageBuilder const&>(std::remove_reference<Catch::MessageBuilder const&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::default_delete<Catch::Generators::GeneratorUntypedBase>&& std::forward<std::default_delete<Catch::Generators::GeneratorUntypedBase> >(std::remove_reference<std::default_delete<Catch::Generators::GeneratorUntypedBase> >::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
Catch::TestCaseTracking::ITracker*&& std::forward<Catch::TestCaseTracking::ITracker*>(std::remove_reference<Catch::TestCaseTracking::ITracker*>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
Catch::TestCaseTracking::TrackerContext& std::forward<Catch::TestCaseTracking::TrackerContext&>(std::remove_reference<Catch::TestCaseTracking::TrackerContext&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
Catch::TestCaseTracking::NameAndLocation const& std::forward<Catch::TestCaseTracking::NameAndLocation const&>(std::remove_reference<Catch::TestCaseTracking::NameAndLocation const&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::shared_ptr<Catch::IReporterFactory> const& std::forward<std::shared_ptr<Catch::IReporterFactory> const&>(std::remove_reference<std::shared_ptr<Catch::IReporterFactory> const&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const& std::forward<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(std::remove_reference<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
Catch::ResultWas::OfType& std::forward<Catch::ResultWas::OfType&>(std::remove_reference<Catch::ResultWas::OfType&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
Catch::TagAlias&& std::forward<Catch::TagAlias>(std::remove_reference<Catch::TagAlias>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
Catch::StringRef& std::forward<Catch::StringRef&>(std::remove_reference<Catch::StringRef&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Catch::TagInfo>&& std::forward<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Catch::TagInfo> >(std::remove_reference<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Catch::TagInfo> >::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
Catch::TagInfo&& std::forward<Catch::TagInfo>(std::remove_reference<Catch::TagInfo>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
Catch::StringRef const& std::forward<Catch::StringRef const&>(std::remove_reference<Catch::StringRef const&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
int& std::forward<int&>(std::remove_reference<int&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
char const (&std::forward<char const (&) [2]>(std::remove_reference<char const (&) [2]>::type&)) [2]:
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
bool& std::forward<bool&>(std::remove_reference<bool&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >& std::forward<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>(std::remove_reference<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
char const (&std::forward<char const (&) [13]>(std::remove_reference<char const (&) [13]>::type&)) [13]:
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
char&& std::forward<char>(std::remove_reference<char>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
Catch::clara::TextFlow::Column const& std::forward<Catch::clara::TextFlow::Column const&>(std::remove_reference<Catch::clara::TextFlow::Column const&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::unique_ptr<Catch::IExceptionTranslator const, std::default_delete<Catch::IExceptionTranslator const> >&& std::forward<std::unique_ptr<Catch::IExceptionTranslator const, std::default_delete<Catch::IExceptionTranslator const> > >(std::remove_reference<std::unique_ptr<Catch::IExceptionTranslator const, std::default_delete<Catch::IExceptionTranslator const> > >::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::unique_ptr<Catch::Detail::EnumInfo, std::default_delete<Catch::Detail::EnumInfo> >&& std::forward<std::unique_ptr<Catch::Detail::EnumInfo, std::default_delete<Catch::Detail::EnumInfo> > >(std::remove_reference<std::unique_ptr<Catch::Detail::EnumInfo, std::default_delete<Catch::Detail::EnumInfo> > >::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
Catch::Detail::EnumInfo*&& std::forward<Catch::Detail::EnumInfo*>(std::remove_reference<Catch::Detail::EnumInfo*>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
Catch::StringRef&& std::forward<Catch::StringRef>(std::remove_reference<Catch::StringRef>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >& std::forward<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&>(std::remove_reference<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(bool)#9} const& std::forward<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(bool)#9} const&>(std::remove_reference<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(bool)#9} const&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
Catch::clara::detail::Opt const& std::forward<Catch::clara::detail::Opt const&>(std::remove_reference<Catch::clara::detail::Opt const&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
Catch::clara::detail::Arg const& std::forward<Catch::clara::detail::Arg const&>(std::remove_reference<Catch::clara::detail::Arg const&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
Catch::clara::detail::Help::Help(bool&)::{lambda(bool)#1} const& std::forward<Catch::clara::detail::Help::Help(bool&)::{lambda(bool)#1} const&>(std::remove_reference<Catch::clara::detail::Help::Help(bool&)::{lambda(bool)#1} const&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
Catch::clara::detail::Token&& std::forward<Catch::clara::detail::Token>(std::remove_reference<Catch::clara::detail::Token>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > const& std::forward<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > const&>(std::remove_reference<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > const&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
Catch::clara::TextFlow::Column::iterator&& std::forward<Catch::clara::TextFlow::Column::iterator>(std::remove_reference<Catch::clara::TextFlow::Column::iterator>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::default_delete<Catch::IStreamingReporter>&& std::forward<std::default_delete<Catch::IStreamingReporter> >(std::remove_reference<std::default_delete<Catch::IStreamingReporter> >::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::shared_ptr<Catch::TestSpec::Pattern>& std::forward<std::shared_ptr<Catch::TestSpec::Pattern>&>(std::remove_reference<std::shared_ptr<Catch::TestSpec::Pattern>&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
char const (&std::forward<char const (&) [1]>(std::remove_reference<char const (&) [1]>::type&)) [1]:
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
decltype(nullptr)&& std::forward<decltype(nullptr)>(std::remove_reference<decltype(nullptr)>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
Catch::TestCaseTracking::NameAndLocation&& std::forward<Catch::TestCaseTracking::NameAndLocation>(std::remove_reference<Catch::TestCaseTracking::NameAndLocation>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
Catch::TestCase const& std::forward<Catch::TestCase const&>(std::remove_reference<Catch::TestCase const&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
unsigned int&& std::forward<unsigned int>(std::remove_reference<unsigned int>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Catch::TagAlias>&& std::forward<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Catch::TagAlias> >(std::remove_reference<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Catch::TagAlias> >::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, false, false, true>& std::forward<std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, false, false, true>&>(std::remove_reference<std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, false, false, true>&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::__detail::_CharMatcher<std::__cxx11::regex_traits<char>, true, true>& std::forward<std::__detail::_CharMatcher<std::__cxx11::regex_traits<char>, true, true>&>(std::remove_reference<std::__detail::_CharMatcher<std::__cxx11::regex_traits<char>, true, true>&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::__detail::_CharMatcher<std::__cxx11::regex_traits<char>, true, false>& std::forward<std::__detail::_CharMatcher<std::__cxx11::regex_traits<char>, true, false>&>(std::remove_reference<std::__detail::_CharMatcher<std::__cxx11::regex_traits<char>, true, false>&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::__detail::_CharMatcher<std::__cxx11::regex_traits<char>, false, true>& std::forward<std::__detail::_CharMatcher<std::__cxx11::regex_traits<char>, false, true>&>(std::remove_reference<std::__detail::_CharMatcher<std::__cxx11::regex_traits<char>, false, true>&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::__detail::_CharMatcher<std::__cxx11::regex_traits<char>, false, false>& std::forward<std::__detail::_CharMatcher<std::__cxx11::regex_traits<char>, false, false>&>(std::remove_reference<std::__detail::_CharMatcher<std::__cxx11::regex_traits<char>, false, false>&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, true, true, true>& std::forward<std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, true, true, true>&>(std::remove_reference<std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, true, true, true>&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, true, true, false>& std::forward<std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, true, true, false>&>(std::remove_reference<std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, true, true, false>&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, true, false, true>& std::forward<std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, true, false, true>&>(std::remove_reference<std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, true, false, true>&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, true, false, false>& std::forward<std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, true, false, false>&>(std::remove_reference<std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, true, false, false>&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, false, true, true>& std::forward<std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, false, true, true>&>(std::remove_reference<std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, false, true, true>&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, false, true, false>& std::forward<std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, false, true, false>&>(std::remove_reference<std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, false, true, false>&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::__cxx11::regex_traits<char>::_RegexMask const& std::forward<std::__cxx11::regex_traits<char>::_RegexMask const&>(std::remove_reference<std::__cxx11::regex_traits<char>::_RegexMask const&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, false, false, false>& std::forward<std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, false, false, false>&>(std::remove_reference<std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, false, false, false>&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
long const& std::forward<long const&>(std::remove_reference<long const&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::tuple<>&& std::forward<std::tuple<> >(std::remove_reference<std::tuple<> >::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::tuple<long const&>&& std::forward<std::tuple<long const&> >(std::remove_reference<std::tuple<long const&> >::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::piecewise_construct_t const& std::forward<std::piecewise_construct_t const&>(std::remove_reference<std::piecewise_construct_t const&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::__detail::_StateSeq<std::__cxx11::regex_traits<char> > const& std::forward<std::__detail::_StateSeq<std::__cxx11::regex_traits<char> > const&>(std::remove_reference<std::__detail::_StateSeq<std::__cxx11::regex_traits<char> > const&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::vector<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > const& std::forward<std::vector<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > const&>(std::remove_reference<std::vector<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > const&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::__detail::_StateSeq<std::__cxx11::regex_traits<char> >&& std::forward<std::__detail::_StateSeq<std::__cxx11::regex_traits<char> > >(std::remove_reference<std::__detail::_StateSeq<std::__cxx11::regex_traits<char> > >::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::__detail::_State<char>&& std::forward<std::__detail::_State<char> >(std::remove_reference<std::__detail::_State<char> >::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const& std::forward<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&>(std::remove_reference<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::__cxx11::regex_traits<char>::_RegexMask&& std::forward<std::__cxx11::regex_traits<char>::_RegexMask>(std::remove_reference<std::__cxx11::regex_traits<char>::_RegexMask>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
Catch::IStreamingReporter*& std::forward<Catch::IStreamingReporter*&>(std::remove_reference<Catch::IStreamingReporter*&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestRunStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > > > const& std::forward<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestRunStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > > > const&>(std::remove_reference<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestRunStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > > > const&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
Catch::TestRunStats const& std::forward<Catch::TestRunStats const&>(std::remove_reference<Catch::TestRunStats const&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
Catch::SectionStats& std::forward<Catch::SectionStats&>(std::remove_reference<Catch::SectionStats&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::default_delete<Catch::CompactReporter>&& std::forward<std::default_delete<Catch::CompactReporter> >(std::remove_reference<std::default_delete<Catch::CompactReporter> >::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::default_delete<Catch::ConsoleReporter>&& std::forward<std::default_delete<Catch::ConsoleReporter> >(std::remove_reference<std::default_delete<Catch::ConsoleReporter> >::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::default_delete<Catch::JunitReporter>&& std::forward<std::default_delete<Catch::JunitReporter> >(std::remove_reference<std::default_delete<Catch::JunitReporter> >::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::default_delete<Catch::XmlReporter>&& std::forward<std::default_delete<Catch::XmlReporter> >(std::remove_reference<std::default_delete<Catch::XmlReporter> >::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const& std::forward<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const&>(std::remove_reference<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::pair<char, char> const& std::forward<std::pair<char, char> const&>(std::remove_reference<std::pair<char, char> const&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > >&& std::forward<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > > >(std::remove_reference<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > > >::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::pair<long, std::vector<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >&& std::forward<std::pair<long, std::vector<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > > >(std::remove_reference<std::pair<long, std::vector<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > > >::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::_Rb_tree_node<std::pair<long const, long> >*& std::forward<std::_Rb_tree_node<std::pair<long const, long> >*&>(std::remove_reference<std::_Rb_tree_node<std::pair<long const, long> >*&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&& std::forward<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >(std::remove_reference<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::pair<char, char>&& std::forward<std::pair<char, char> >(std::remove_reference<std::pair<char, char> >::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::__detail::_State<char> const& std::forward<std::__detail::_State<char> const&>(std::remove_reference<std::__detail::_State<char> const&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::__detail::_BracketMatcher<std::__cxx11::regex_traits<char>, true, true>& std::forward<std::__detail::_BracketMatcher<std::__cxx11::regex_traits<char>, true, true>&>(std::remove_reference<std::__detail::_BracketMatcher<std::__cxx11::regex_traits<char>, true, true>&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::__detail::_BracketMatcher<std::__cxx11::regex_traits<char>, true, false>& std::forward<std::__detail::_BracketMatcher<std::__cxx11::regex_traits<char>, true, false>&>(std::remove_reference<std::__detail::_BracketMatcher<std::__cxx11::regex_traits<char>, true, false>&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::__detail::_BracketMatcher<std::__cxx11::regex_traits<char>, false, true>& std::forward<std::__detail::_BracketMatcher<std::__cxx11::regex_traits<char>, false, true>&>(std::remove_reference<std::__detail::_BracketMatcher<std::__cxx11::regex_traits<char>, false, true>&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::__detail::_BracketMatcher<std::__cxx11::regex_traits<char>, false, false>& std::forward<std::__detail::_BracketMatcher<std::__cxx11::regex_traits<char>, false, false>&>(std::remove_reference<std::__detail::_BracketMatcher<std::__cxx11::regex_traits<char>, false, false>&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
Catch::clara::detail::Arg& std::forward<Catch::clara::detail::Arg&>(std::remove_reference<Catch::clara::detail::Arg&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
Catch::TestCase&& std::forward<Catch::TestCase>(std::remove_reference<Catch::TestCase>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::pair<unsigned long, Catch::TestCase const*>&& std::forward<std::pair<unsigned long, Catch::TestCase const*> >(std::remove_reference<std::pair<unsigned long, Catch::TestCase const*> >::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >*&& std::forward<std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >*>(std::remove_reference<std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >*>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::regex_constants::syntax_option_type& std::forward<std::regex_constants::syntax_option_type&>(std::remove_reference<std::regex_constants::syntax_option_type&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::locale const& std::forward<std::locale const&>(std::remove_reference<std::locale const&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
Catch::IExceptionTranslator const*&& std::forward<Catch::IExceptionTranslator const*>(std::remove_reference<Catch::IExceptionTranslator const*>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::pair<int, Catch::StringRef>&& std::forward<std::pair<int, Catch::StringRef> >(std::remove_reference<std::pair<int, Catch::StringRef> >::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
Catch::clara::detail::HelpColumns const& std::forward<Catch::clara::detail::HelpColumns const&>(std::remove_reference<Catch::clara::detail::HelpColumns const&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
char const* const& std::forward<char const* const&>(std::remove_reference<char const* const&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
unsigned long&& std::forward<unsigned long>(std::remove_reference<unsigned long>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::_Rb_tree_node<Catch::Verbosity>*& std::forward<std::_Rb_tree_node<Catch::Verbosity>*&>(std::remove_reference<std::_Rb_tree_node<Catch::Verbosity>*&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
Catch::clara::detail::Opt& std::forward<Catch::clara::detail::Opt&>(std::remove_reference<Catch::clara::detail::Opt&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
Catch::clara::detail::Token const& std::forward<Catch::clara::detail::Token const&>(std::remove_reference<Catch::clara::detail::Token const&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::_Rb_tree_node<Catch::TestCase>*& std::forward<std::_Rb_tree_node<Catch::TestCase>*&>(std::remove_reference<std::_Rb_tree_node<Catch::TestCase>*&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Catch::TagAlias> >*& std::forward<std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Catch::TagAlias> >*&>(std::remove_reference<std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Catch::TagAlias> >*&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::_Rb_tree_node<Catch::TestCase const*>*& std::forward<std::_Rb_tree_node<Catch::TestCase const*>*&>(std::remove_reference<std::_Rb_tree_node<Catch::TestCase const*>*&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<Catch::IReporterFactory> > >*& std::forward<std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<Catch::IReporterFactory> > >*&>(std::remove_reference<std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<Catch::IReporterFactory> > >*&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Catch::TagInfo> >*& std::forward<std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Catch::TagInfo> >*&>(std::remove_reference<std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Catch::TagInfo> >*&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::_Rb_tree_node_base*& std::forward<std::_Rb_tree_node_base*&>(std::remove_reference<std::_Rb_tree_node_base*&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::_Rb_tree_node<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >*& std::forward<std::_Rb_tree_node<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >*&>(std::remove_reference<std::_Rb_tree_node<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >*&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > > const& std::forward<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > > const&>(std::remove_reference<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > > const&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
Catch::ScopedMessage&& std::forward<Catch::ScopedMessage>(std::remove_reference<Catch::ScopedMessage>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> >&& std::forward<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > >(std::remove_reference<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > >::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode>&& std::forward<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> >(std::remove_reference<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> >::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
Catch::SectionInfo&& std::forward<Catch::SectionInfo>(std::remove_reference<Catch::SectionInfo>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
Catch::clara::detail::HelpColumns&& std::forward<Catch::clara::detail::HelpColumns>(std::remove_reference<Catch::clara::detail::HelpColumns>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >& std::forward<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&>(std::remove_reference<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::shared_ptr<Catch::TestSpec::Pattern>&& std::forward<std::shared_ptr<Catch::TestSpec::Pattern> >(std::remove_reference<std::shared_ptr<Catch::TestSpec::Pattern> >::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
Catch::TestSpec::Filter&& std::forward<Catch::TestSpec::Filter>(std::remove_reference<Catch::TestSpec::Filter>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::shared_ptr<Catch::TestCaseTracking::ITracker>&& std::forward<std::shared_ptr<Catch::TestCaseTracking::ITracker> >(std::remove_reference<std::shared_ptr<Catch::TestCaseTracking::ITracker> >::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::default_delete<std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> > >&& std::forward<std::default_delete<std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> > > >(std::remove_reference<std::default_delete<std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> > > >::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::__exception_ptr::exception_ptr&& std::forward<std::__exception_ptr::exception_ptr>(std::remove_reference<std::__exception_ptr::exception_ptr>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestRunStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > > >&& std::forward<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestRunStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > > > >(std::remove_reference<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestRunStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > > > >::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
Catch::SectionEndInfo&& std::forward<Catch::SectionEndInfo>(std::remove_reference<Catch::SectionEndInfo>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::shared_ptr<Catch::IReporterFactory>&& std::forward<std::shared_ptr<Catch::IReporterFactory> >(std::remove_reference<std::shared_ptr<Catch::IReporterFactory> >::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
Catch::MessageInfo&& std::forward<Catch::MessageInfo>(std::remove_reference<Catch::MessageInfo>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
std::default_delete<Catch::IExceptionTranslator const>&& std::forward<std::default_delete<Catch::IExceptionTranslator const> >(std::remove_reference<std::default_delete<Catch::IExceptionTranslator const> >::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
Catch::clara::detail::HelpColumns& std::forward<Catch::clara::detail::HelpColumns&>(std::remove_reference<Catch::clara::detail::HelpColumns&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
Catch::clara::detail::Opt&& std::forward<Catch::clara::detail::Opt>(std::remove_reference<Catch::clara::detail::Opt>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
Catch::clara::detail::Arg&& std::forward<Catch::clara::detail::Arg>(std::remove_reference<Catch::clara::detail::Arg>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
Catch::clara::TextFlow::Column&& std::forward<Catch::clara::TextFlow::Column>(std::remove_reference<Catch::clara::TextFlow::Column>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
Catch::(anonymous namespace)::ColumnInfo const& std::forward<Catch::(anonymous namespace)::ColumnInfo const&>(std::remove_reference<Catch::(anonymous namespace)::ColumnInfo const&>::type&):
    #####:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   77:    { return static_cast<_Tp&&>(__t); }
------------------
        -:   78:
        -:   79:  /**
        -:   80:   *  @brief  Forward an rvalue.
        -:   81:   *  @return The parameter cast to the specified type.
        -:   82:   *
        -:   83:   *  This function is used to implement "perfect forwarding".
        -:   84:   */
        -:   85:  template<typename _Tp>
        -:   86:    constexpr _Tp&&
        -:   87:    forward(typename std::remove_reference<_Tp>::type&& __t) noexcept
        -:   88:    {
        -:   89:      static_assert(!std::is_lvalue_reference<_Tp>::value, "template argument"
        -:   90:		    " substituting _Tp is an lvalue reference type");
        -:   91:      return static_cast<_Tp&&>(__t);
        -:   92:    }
        -:   93:
        -:   94:  /**
        -:   95:   *  @brief  Convert a value to an rvalue.
        -:   96:   *  @param  __t  A thing of arbitrary type.
        -:   97:   *  @return The parameter cast to an rvalue-reference to allow moving it.
        -:   98:  */
        -:   99:  template<typename _Tp>
        -:  100:    constexpr typename std::remove_reference<_Tp>::type&&
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::__shared_ptr<Catch::TestSpec::ExcludedPattern, (__gnu_cxx::_Lock_policy)2>&>::type&& std::move<std::__shared_ptr<Catch::TestSpec::ExcludedPattern, (__gnu_cxx::_Lock_policy)2>&>(std::__shared_ptr<Catch::TestSpec::ExcludedPattern, (__gnu_cxx::_Lock_policy)2>&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::shared_ptr<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(bool)#11}> >&>::type&& std::move<std::shared_ptr<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(bool)#11}> >&>(std::remove_reference&&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::shared_ptr<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#1}> >&>::type&& std::move<std::shared_ptr<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#1}> >&>(std::remove_reference&&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::shared_ptr<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(int)#10}> >&>::type&& std::move<std::shared_ptr<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(int)#10}> >&>(std::remove_reference&&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::shared_ptr<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#8}> >&>::type&& std::move<std::shared_ptr<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#8}> >&>(std::remove_reference&&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<Catch::clara::detail::BoundValueRefBase*&>::type&& std::move<Catch::clara::detail::BoundValueRefBase*&>(Catch::clara::detail::BoundValueRefBase*&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<Catch::clara::TextFlow::Column::iterator*&>::type&& std::move<Catch::clara::TextFlow::Column::iterator*&>(Catch::clara::TextFlow::Column::iterator*&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::shared_ptr<Catch::ReporterRegistrar<Catch::XmlReporter>::ReporterFactory>&>::type&& std::move<std::shared_ptr<Catch::ReporterRegistrar<Catch::XmlReporter>::ReporterFactory>&>(std::shared_ptr<Catch::ReporterRegistrar<Catch::XmlReporter>::ReporterFactory>&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::shared_ptr<Catch::ReporterRegistrar<Catch::JunitReporter>::ReporterFactory>&>::type&& std::move<std::shared_ptr<Catch::ReporterRegistrar<Catch::JunitReporter>::ReporterFactory>&>(std::shared_ptr<Catch::ReporterRegistrar<Catch::JunitReporter>::ReporterFactory>&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > >&>::type&& std::move<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > >&>(std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > >&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> >&>::type&& std::move<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> >&>(std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> >&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<Catch::(anonymous namespace)::fileNameTag(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#1}&>::type&& std::move<Catch::(anonymous namespace)::fileNameTag(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#1}&>(std::remove_reference&&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::shared_ptr<Catch::ReporterRegistrar<Catch::ConsoleReporter>::ReporterFactory>&>::type&& std::move<std::shared_ptr<Catch::ReporterRegistrar<Catch::ConsoleReporter>::ReporterFactory>&>(std::shared_ptr<Catch::ReporterRegistrar<Catch::ConsoleReporter>::ReporterFactory>&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::shared_ptr<Catch::ReporterRegistrar<Catch::CompactReporter>::ReporterFactory>&>::type&& std::move<std::shared_ptr<Catch::ReporterRegistrar<Catch::CompactReporter>::ReporterFactory>&>(std::shared_ptr<Catch::ReporterRegistrar<Catch::CompactReporter>::ReporterFactory>&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::shared_ptr<Catch::clara::detail::BoundValueRef<double> >&>::type&& std::move<std::shared_ptr<Catch::clara::detail::BoundValueRef<double> >&>(std::shared_ptr<Catch::clara::detail::BoundValueRef<double> >&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::vector<Catch::TestCase const*, std::allocator<Catch::TestCase const*> >&>::type&& std::move<std::vector<Catch::TestCase const*, std::allocator<Catch::TestCase const*> >&>(std::vector<Catch::TestCase const*, std::allocator<Catch::TestCase const*> >&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<Catch::TestCaseTracking::TrackerBase::findChild(Catch::TestCaseTracking::NameAndLocation const&)::{lambda(std::shared_ptr<Catch::TestCaseTracking::ITracker> const&)#1}&>::type&& std::move<Catch::TestCaseTracking::TrackerBase::findChild(Catch::TestCaseTracking::NameAndLocation const&)::{lambda(std::shared_ptr<Catch::TestCaseTracking::ITracker> const&)#1}&>(std::remove_reference&&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::__shared_ptr<Catch::TestCaseTracking::SectionTracker, (__gnu_cxx::_Lock_policy)2>&>::type&& std::move<std::__shared_ptr<Catch::TestCaseTracking::SectionTracker, (__gnu_cxx::_Lock_policy)2>&>(std::__shared_ptr<Catch::TestCaseTracking::SectionTracker, (__gnu_cxx::_Lock_policy)2>&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<Catch::sortTests(Catch::IConfig const&, std::vector<Catch::TestCase, std::allocator<Catch::TestCase> > const&)::{lambda(std::pair<unsigned long, Catch::TestCase const*> const&, std::pair<unsigned long, Catch::TestCase const*> const&)#1}&>::type&& std::move<Catch::sortTests(Catch::IConfig const&, std::vector<Catch::TestCase, std::allocator<Catch::TestCase> > const&)::{lambda(std::pair<unsigned long, Catch::TestCase const*> const&, std::pair<unsigned long, Catch::TestCase const*> const&)#1}&>(std::remove_reference&&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::__shared_ptr<Catch::Config, (__gnu_cxx::_Lock_policy)2>&>::type&& std::move<std::__shared_ptr<Catch::Config, (__gnu_cxx::_Lock_policy)2>&>(std::__shared_ptr<Catch::Config, (__gnu_cxx::_Lock_policy)2>&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<Catch::Config*&>::type&& std::move<Catch::Config*&>(Catch::Config*&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::__shared_ptr<Catch::clara::detail::BoundValueRefBase, (__gnu_cxx::_Lock_policy)2>&>::type&& std::move<std::__shared_ptr<Catch::clara::detail::BoundValueRefBase, (__gnu_cxx::_Lock_policy)2>&>(std::__shared_ptr<Catch::clara::detail::BoundValueRefBase, (__gnu_cxx::_Lock_policy)2>&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::__shared_ptr<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, (__gnu_cxx::_Lock_policy)2>&>::type&& std::move<std::__shared_ptr<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, (__gnu_cxx::_Lock_policy)2>&>(std::__shared_ptr<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, (__gnu_cxx::_Lock_policy)2>&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<Catch::MessageInfo&>::type&& std::move<Catch::MessageInfo&>(Catch::MessageInfo&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<Catch::Generators::GeneratorTracker::close()::{lambda()#1}::operator()() const::{lambda(std::shared_ptr<Catch::TestCaseTracking::ITracker>)#1}&>::type&& std::move<Catch::Generators::GeneratorTracker::close()::{lambda()#1}::operator()() const::{lambda(std::shared_ptr<Catch::TestCaseTracking::ITracker>)#1}&>(Catch::Generators::GeneratorTracker::close()::{lambda()#1}::operator()() const::{lambda(std::shared_ptr<Catch::TestCaseTracking::ITracker>)#1}&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::__shared_ptr<Catch::Generators::GeneratorTracker, (__gnu_cxx::_Lock_policy)2>&>::type&& std::move<std::__shared_ptr<Catch::Generators::GeneratorTracker, (__gnu_cxx::_Lock_policy)2>&>(std::__shared_ptr<Catch::Generators::GeneratorTracker, (__gnu_cxx::_Lock_policy)2>&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<char const*&>::type&& std::move<char const*&>(char const*&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*&>::type&& std::move<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::allocator<Catch::clara::detail::Opt>&>::type&& std::move<std::allocator<Catch::clara::detail::Opt>&>(std::allocator<Catch::clara::detail::Opt>&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::allocator<Catch::TestSpec::FilterMatch>&>::type&& std::move<std::allocator<Catch::TestSpec::FilterMatch>&>(std::allocator<Catch::TestSpec::FilterMatch>&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&>::type&& std::move<std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&>(std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::allocator<Catch::TestSpec::Filter>&>::type&& std::move<std::allocator<Catch::TestSpec::Filter>&>(std::allocator<Catch::TestSpec::Filter>&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode*&>::type&& std::move<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode*&>(Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode*&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::allocator<std::_Rb_tree_node<Catch::Verbosity> >&>::type&& std::move<std::allocator<std::_Rb_tree_node<Catch::Verbosity> >&>(std::allocator<std::_Rb_tree_node<Catch::Verbosity> >&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<Catch::TestSpec::Pattern*&>::type&& std::move<Catch::TestSpec::Pattern*&>(Catch::TestSpec::Pattern*&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<Catch::TestSpec::Filter::matches(Catch::TestCaseInfo const&) const::{lambda(std::shared_ptr<Catch::TestSpec::Pattern> const&)#1}&>::type&& std::move<Catch::TestSpec::Filter::matches(Catch::TestCaseInfo const&) const::{lambda(std::shared_ptr<Catch::TestSpec::Pattern> const&)#1}&>(std::remove_reference&&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<Catch::TestCaseTracking::SectionTracker*&>::type&& std::move<Catch::TestCaseTracking::SectionTracker*&>(Catch::TestCaseTracking::SectionTracker*&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<Catch::TestCaseTracking::TrackerBase::close()::{lambda(std::shared_ptr<Catch::TestCaseTracking::ITracker> const&)#1}&>::type&& std::move<Catch::TestCaseTracking::TrackerBase::close()::{lambda(std::shared_ptr<Catch::TestCaseTracking::ITracker> const&)#1}&>(std::remove_reference&&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<Catch::TestCase*&>::type&& std::move<Catch::TestCase*&>(Catch::TestCase*&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::pair<unsigned long, Catch::TestCase const*>*&>::type&& std::move<std::pair<unsigned long, Catch::TestCase const*>*&>(std::pair<unsigned long, Catch::TestCase const*>*&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::_Tuple_impl<1ul, std::default_delete<Catch::IStreamingReporter> >&>::type&& std::move<std::_Tuple_impl<1ul, std::default_delete<Catch::IStreamingReporter> >&>(std::_Tuple_impl<1ul, std::default_delete<Catch::IStreamingReporter> >&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<Catch::Generators::GeneratorTracker*&>::type&& std::move<Catch::Generators::GeneratorTracker*&>(Catch::Generators::GeneratorTracker*&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::locale&>::type&& std::move<std::locale&>(std::locale&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::pair<int, Catch::StringRef>*&>::type&& std::move<std::pair<int, Catch::StringRef>*&>(std::pair<int, Catch::StringRef>*&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<Catch::StringRef*&>::type&& std::move<Catch::StringRef*&>(Catch::StringRef*&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::shared_ptr<Catch::clara::detail::BoundValueRef<long> >&>::type&& std::move<std::shared_ptr<Catch::clara::detail::BoundValueRef<long> >&>(std::shared_ptr<Catch::clara::detail::BoundValueRef<long> >&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::shared_ptr<Catch::clara::detail::BoundValueRef<unsigned int> >&>::type&& std::move<std::shared_ptr<Catch::clara::detail::BoundValueRef<unsigned int> >&>(std::shared_ptr<Catch::clara::detail::BoundValueRef<unsigned int> >&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::shared_ptr<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#6}> >&>::type&& std::move<std::shared_ptr<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#6}> >&>(std::remove_reference&&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::shared_ptr<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#5}> >&>::type&& std::move<std::shared_ptr<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#5}> >&>(std::remove_reference&&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::shared_ptr<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#4}> >&>::type&& std::move<std::shared_ptr<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#4}> >&>(std::remove_reference&&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::shared_ptr<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#3}> >&>::type&& std::move<std::shared_ptr<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#3}> >&>(std::remove_reference&&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::shared_ptr<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#7}> >&>::type&& std::move<std::shared_ptr<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#7}> >&>(std::remove_reference&&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::shared_ptr<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#2}> >&>::type&& std::move<std::shared_ptr<Catch::clara::detail::BoundLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#2}> >&>(std::remove_reference&&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::shared_ptr<Catch::clara::detail::BoundValueRefBase>&>::type&& std::move<std::shared_ptr<Catch::clara::detail::BoundValueRefBase>&>(std::shared_ptr<Catch::clara::detail::BoundValueRefBase>&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::shared_ptr<Catch::TestCaseTracking::ITracker>&>::type&& std::move<std::shared_ptr<Catch::TestCaseTracking::ITracker>&>(std::shared_ptr<Catch::TestCaseTracking::ITracker>&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<Catch::Generators::GeneratorUntypedBase*&>::type&& std::move<Catch::Generators::GeneratorUntypedBase*&>(Catch::Generators::GeneratorUntypedBase*&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::_Vector_base<Catch::TestCase, std::allocator<Catch::TestCase> >::_Vector_impl&>::type&& std::move<std::_Vector_base<Catch::TestCase, std::allocator<Catch::TestCase> >::_Vector_impl&>(std::_Vector_base<Catch::TestCase, std::allocator<Catch::TestCase> >::_Vector_impl&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::tuple<Catch::IStreamingReporter*, std::default_delete<Catch::IStreamingReporter> >&>::type&& std::move<std::tuple<Catch::IStreamingReporter*, std::default_delete<Catch::IStreamingReporter> >&>(std::tuple<Catch::IStreamingReporter*, std::default_delete<Catch::IStreamingReporter> >&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<Catch::IStreamingReporter*&>::type&& std::move<Catch::IStreamingReporter*&>(Catch::IStreamingReporter*&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::unique_ptr<Catch::IExceptionTranslator const, std::default_delete<Catch::IExceptionTranslator const> >&>::type&& std::move<std::unique_ptr<Catch::IExceptionTranslator const, std::default_delete<Catch::IExceptionTranslator const> >&>(std::unique_ptr<Catch::IExceptionTranslator const, std::default_delete<Catch::IExceptionTranslator const> >&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<Catch::IExceptionTranslator const*&>::type&& std::move<Catch::IExceptionTranslator const*&>(Catch::IExceptionTranslator const*&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::unique_ptr<Catch::Detail::EnumInfo, std::default_delete<Catch::Detail::EnumInfo> >&>::type&& std::move<std::unique_ptr<Catch::Detail::EnumInfo, std::default_delete<Catch::Detail::EnumInfo> >&>(std::unique_ptr<Catch::Detail::EnumInfo, std::default_delete<Catch::Detail::EnumInfo> >&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::tuple<Catch::Detail::EnumInfo*, std::default_delete<Catch::Detail::EnumInfo> >&>::type&& std::move<std::tuple<Catch::Detail::EnumInfo*, std::default_delete<Catch::Detail::EnumInfo> >&>(std::tuple<Catch::Detail::EnumInfo*, std::default_delete<Catch::Detail::EnumInfo> >&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<Catch::Detail::EnumInfo*&>::type&& std::move<Catch::Detail::EnumInfo*&>(Catch::Detail::EnumInfo*&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<Catch::StringRef&>::type&& std::move<Catch::StringRef&>(Catch::StringRef&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::vector<Catch::TestSpec::Filter, std::allocator<Catch::TestSpec::Filter> >&>::type&& std::move<std::vector<Catch::TestSpec::Filter, std::allocator<Catch::TestSpec::Filter> >&>(std::vector<Catch::TestSpec::Filter, std::allocator<Catch::TestSpec::Filter> >&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<Catch::IStream const*&>::type&& std::move<Catch::IStream const*&>(Catch::IStream const*&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::shared_ptr<Catch::Generators::GeneratorTracker>&>::type&& std::move<std::shared_ptr<Catch::Generators::GeneratorTracker>&>(std::shared_ptr<Catch::Generators::GeneratorTracker>&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::shared_ptr<Catch::clara::detail::BoundFlagRef>&>::type&& std::move<std::shared_ptr<Catch::clara::detail::BoundFlagRef>&>(std::shared_ptr<Catch::clara::detail::BoundFlagRef>&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::shared_ptr<Catch::clara::detail::BoundValueRef<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&>::type&& std::move<std::shared_ptr<Catch::clara::detail::BoundValueRef<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&>(std::shared_ptr<Catch::clara::detail::BoundValueRef<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::shared_ptr<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&>::type&& std::move<std::shared_ptr<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&>(std::shared_ptr<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<Catch::clara::detail::Token&>::type&& std::move<Catch::clara::detail::Token&>(Catch::clara::detail::Token&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<Catch::clara::TextFlow::Column::iterator&>::type&& std::move<Catch::clara::TextFlow::Column::iterator&>(Catch::clara::TextFlow::Column::iterator&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::allocator<char>&>::type&& std::move<std::allocator<char>&>(std::allocator<char>&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::vector<Catch::(anonymous namespace)::ColumnInfo, std::allocator<Catch::(anonymous namespace)::ColumnInfo> >&>::type&& std::move<std::vector<Catch::(anonymous namespace)::ColumnInfo, std::allocator<Catch::(anonymous namespace)::ColumnInfo> >&>(std::vector<Catch::(anonymous namespace)::ColumnInfo, std::allocator<Catch::(anonymous namespace)::ColumnInfo> >&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&>::type&& std::move<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&>(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<Catch::TestCaseInfo&>::type&& std::move<Catch::TestCaseInfo&>(Catch::TestCaseInfo&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::unique_ptr<Catch::IStreamingReporter, std::default_delete<Catch::IStreamingReporter> >&>::type&& std::move<std::unique_ptr<Catch::IStreamingReporter, std::default_delete<Catch::IStreamingReporter> >&>(std::unique_ptr<Catch::IStreamingReporter, std::default_delete<Catch::IStreamingReporter> >&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::unique_ptr<Catch::Generators::GeneratorUntypedBase, std::default_delete<Catch::Generators::GeneratorUntypedBase> >&>::type&& std::move<std::unique_ptr<Catch::Generators::GeneratorUntypedBase, std::default_delete<Catch::Generators::GeneratorUntypedBase> >&>(std::unique_ptr<Catch::Generators::GeneratorUntypedBase, std::default_delete<Catch::Generators::GeneratorUntypedBase> >&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>::type&& std::move<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::vector<std::shared_ptr<Catch::TestSpec::Pattern>, std::allocator<std::shared_ptr<Catch::TestSpec::Pattern> > >&>::type&& std::move<std::vector<std::shared_ptr<Catch::TestSpec::Pattern>, std::allocator<std::shared_ptr<Catch::TestSpec::Pattern> > >&>(std::vector<std::shared_ptr<Catch::TestSpec::Pattern>, std::allocator<std::shared_ptr<Catch::TestSpec::Pattern> > >&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::_Tuple_impl<1ul, std::default_delete<Catch::Detail::EnumInfo> >&>::type&& std::move<std::_Tuple_impl<1ul, std::default_delete<Catch::Detail::EnumInfo> >&>(std::_Tuple_impl<1ul, std::default_delete<Catch::Detail::EnumInfo> >&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::shared_ptr<Catch::clara::detail::BoundValueRef<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > >&>::type&& std::move<std::shared_ptr<Catch::clara::detail::BoundValueRef<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > >&>(std::shared_ptr<Catch::clara::detail::BoundValueRef<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > >&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::shared_ptr<Catch::clara::detail::BoundFlagLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(bool)#9}> >&>::type&& std::move<std::shared_ptr<Catch::clara::detail::BoundFlagLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(bool)#9}> >&>(std::remove_reference&&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::shared_ptr<Catch::clara::detail::BoundFlagLambda<Catch::clara::detail::Help::Help(bool&)::{lambda(bool)#1}> >&>::type&& std::move<std::shared_ptr<Catch::clara::detail::BoundFlagLambda<Catch::clara::detail::Help::Help(bool&)::{lambda(bool)#1}> >&>(std::remove_reference&&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::__shared_ptr<Catch::clara::detail::BoundValueRef<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, (__gnu_cxx::_Lock_policy)2>&>::type&& std::move<std::__shared_ptr<Catch::clara::detail::BoundValueRef<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, (__gnu_cxx::_Lock_policy)2>&>(std::__shared_ptr<Catch::clara::detail::BoundValueRef<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, (__gnu_cxx::_Lock_policy)2>&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<Catch::SummaryColumn&>::type&& std::move<Catch::SummaryColumn&>(Catch::SummaryColumn&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<Catch::TablePrinter*&>::type&& std::move<Catch::TablePrinter*&>(Catch::TablePrinter*&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::_Vector_base<Catch::(anonymous namespace)::ColumnInfo, std::allocator<Catch::(anonymous namespace)::ColumnInfo> >::_Vector_impl&>::type&& std::move<std::_Vector_base<Catch::(anonymous namespace)::ColumnInfo, std::allocator<Catch::(anonymous namespace)::ColumnInfo> >::_Vector_impl&>(std::_Vector_base<Catch::(anonymous namespace)::ColumnInfo, std::allocator<Catch::(anonymous namespace)::ColumnInfo> >::_Vector_impl&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::shared_ptr<Catch::TestSpec::TagPattern>&>::type&& std::move<std::shared_ptr<Catch::TestSpec::TagPattern>&>(std::shared_ptr<Catch::TestSpec::TagPattern>&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::shared_ptr<Catch::TestSpec::ExcludedPattern>&>::type&& std::move<std::shared_ptr<Catch::TestSpec::ExcludedPattern>&>(std::shared_ptr<Catch::TestSpec::ExcludedPattern>&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::shared_ptr<Catch::TestSpec::Pattern>&>::type&& std::move<std::shared_ptr<Catch::TestSpec::Pattern>&>(std::shared_ptr<Catch::TestSpec::Pattern>&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::shared_ptr<Catch::TestSpec::NamePattern>&>::type&& std::move<std::shared_ptr<Catch::TestSpec::NamePattern>&>(std::shared_ptr<Catch::TestSpec::NamePattern>&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::allocator<Catch::clara::detail::Arg>&>::type&& std::move<std::allocator<Catch::clara::detail::Arg>&>(std::allocator<Catch::clara::detail::Arg>&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::shared_ptr<Catch::TestCaseTracking::SectionTracker>&>::type&& std::move<std::shared_ptr<Catch::TestCaseTracking::SectionTracker>&>(std::shared_ptr<Catch::TestCaseTracking::SectionTracker>&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::vector<Catch::TestCase, std::allocator<Catch::TestCase> >&>::type&& std::move<std::vector<Catch::TestCase, std::allocator<Catch::TestCase> >&>(std::vector<Catch::TestCase, std::allocator<Catch::TestCase> >&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::shared_ptr<Catch::ITestInvoker>&>::type&& std::move<std::shared_ptr<Catch::ITestInvoker>&>(std::shared_ptr<Catch::ITestInvoker>&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_Vector_impl&>::type&& std::move<std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_Vector_impl&>(std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_Vector_impl&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::unique_ptr<std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >, std::default_delete<std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> > > >&>::type&& std::move<std::unique_ptr<std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >, std::default_delete<std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> > > >&>(std::unique_ptr<std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >, std::default_delete<std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> > > >&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >*&>::type&& std::move<std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >*&>(std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >*&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<Catch::Detail::(anonymous namespace)::StreamBufImpl<Catch::Detail::(anonymous namespace)::OutputDebugWriter, 256ul>*&>::type&& std::move<Catch::Detail::(anonymous namespace)::StreamBufImpl<Catch::Detail::(anonymous namespace)::OutputDebugWriter, 256ul>*&>(Catch::Detail::(anonymous namespace)::StreamBufImpl<Catch::Detail::(anonymous namespace)::OutputDebugWriter, 256ul>*&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::shared_ptr<Catch::Config>&>::type&& std::move<std::shared_ptr<Catch::Config>&>(std::shared_ptr<Catch::Config>&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::vector<Catch::clara::detail::Arg, std::allocator<Catch::clara::detail::Arg> >&>::type&& std::move<std::vector<Catch::clara::detail::Arg, std::allocator<Catch::clara::detail::Arg> >&>(std::vector<Catch::clara::detail::Arg, std::allocator<Catch::clara::detail::Arg> >&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::vector<Catch::clara::detail::Opt, std::allocator<Catch::clara::detail::Opt> >&>::type&& std::move<std::vector<Catch::clara::detail::Opt, std::allocator<Catch::clara::detail::Opt> >&>(std::vector<Catch::clara::detail::Opt, std::allocator<Catch::clara::detail::Opt> >&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::vector<Catch::TestSpec::FilterMatch, std::allocator<Catch::TestSpec::FilterMatch> >&>::type&& std::move<std::vector<Catch::TestSpec::FilterMatch, std::allocator<Catch::TestSpec::FilterMatch> >&>(std::vector<Catch::TestSpec::FilterMatch, std::allocator<Catch::TestSpec::FilterMatch> >&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<Catch::TestCaseTracking::ITracker*&>::type&& std::move<Catch::TestCaseTracking::ITracker*&>(Catch::TestCaseTracking::ITracker*&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<long&>::type&& std::move<long&>(long&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::__detail::_CharMatcher<std::__cxx11::regex_traits<char>, false, false>&>::type&& std::move<std::__detail::_CharMatcher<std::__cxx11::regex_traits<char>, false, false>&>(std::__detail::_CharMatcher<std::__cxx11::regex_traits<char>, false, false>&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, true, true, true>&>::type&& std::move<std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, true, true, true>&>(std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, true, true, true>&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, true, true, false>&>::type&& std::move<std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, true, true, false>&>(std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, true, true, false>&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, true, false, true>&>::type&& std::move<std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, true, false, true>&>(std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, true, false, true>&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, true, false, false>&>::type&& std::move<std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, true, false, false>&>(std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, true, false, false>&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, false, true, true>&>::type&& std::move<std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, false, true, true>&>(std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, false, true, true>&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, false, true, false>&>::type&& std::move<std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, false, true, false>&>(std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, false, true, false>&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, false, false, true>&>::type&& std::move<std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, false, false, true>&>(std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, false, false, true>&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, false, false, false>&>::type&& std::move<std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, false, false, false>&>(std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, false, false, false>&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::__detail::_BracketMatcher<std::__cxx11::regex_traits<char>, true, true>&>::type&& std::move<std::__detail::_BracketMatcher<std::__cxx11::regex_traits<char>, true, true>&>(std::__detail::_BracketMatcher<std::__cxx11::regex_traits<char>, true, true>&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::__detail::_BracketMatcher<std::__cxx11::regex_traits<char>, true, false>&>::type&& std::move<std::__detail::_BracketMatcher<std::__cxx11::regex_traits<char>, true, false>&>(std::__detail::_BracketMatcher<std::__cxx11::regex_traits<char>, true, false>&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::__detail::_BracketMatcher<std::__cxx11::regex_traits<char>, false, true>&>::type&& std::move<std::__detail::_BracketMatcher<std::__cxx11::regex_traits<char>, false, true>&>(std::__detail::_BracketMatcher<std::__cxx11::regex_traits<char>, false, true>&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::__detail::_BracketMatcher<std::__cxx11::regex_traits<char>, false, false>&>::type&& std::move<std::__detail::_BracketMatcher<std::__cxx11::regex_traits<char>, false, false>&>(std::__detail::_BracketMatcher<std::__cxx11::regex_traits<char>, false, false>&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::__detail::_CharMatcher<std::__cxx11::regex_traits<char>, false, true>&>::type&& std::move<std::__detail::_CharMatcher<std::__cxx11::regex_traits<char>, false, true>&>(std::__detail::_CharMatcher<std::__cxx11::regex_traits<char>, false, true>&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<bool (*&)(std::_Any_data const&, char&&)>::type&& std::move<bool (*&)(std::_Any_data const&, char&&)>(bool (*&)(std::_Any_data const&, char&&)):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>::type&& std::move<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::_Any_data&>::type&& std::move<std::_Any_data&>(std::_Any_data&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode>&>::type&& std::move<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode>&>(std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode>&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<Catch::SectionInfo&>::type&& std::move<Catch::SectionInfo&>(Catch::SectionInfo&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::_Vector_base<std::shared_ptr<Catch::TestSpec::Pattern>, std::allocator<std::shared_ptr<Catch::TestSpec::Pattern> > >::_Vector_impl&>::type&& std::move<std::_Vector_base<std::shared_ptr<Catch::TestSpec::Pattern>, std::allocator<std::shared_ptr<Catch::TestSpec::Pattern> > >::_Vector_impl&>(std::_Vector_base<std::shared_ptr<Catch::TestSpec::Pattern>, std::allocator<std::shared_ptr<Catch::TestSpec::Pattern> > >::_Vector_impl&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<Catch::TestCase const*&>::type&& std::move<Catch::TestCase const*&>(Catch::TestCase const*&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<unsigned long&>::type&& std::move<unsigned long&>(unsigned long&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::_Vector_base<std::pair<long, std::vector<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >, std::allocator<std::pair<long, std::vector<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > > > >::_Vector_impl&>::type&& std::move<std::_Vector_base<std::pair<long, std::vector<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >, std::allocator<std::pair<long, std::vector<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > > > >::_Vector_impl&>(std::_Vector_base<std::pair<long, std::vector<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >, std::allocator<std::pair<long, std::vector<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > > > >::_Vector_impl&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<Catch::clara::detail::HelpColumns&>::type&& std::move<Catch::clara::detail::HelpColumns&>(Catch::clara::detail::HelpColumns&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::shared_ptr<Catch::clara::detail::BoundRef>&>::type&& std::move<std::shared_ptr<Catch::clara::detail::BoundRef>&>(std::shared_ptr<Catch::clara::detail::BoundRef>&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<Catch::TestSpec::Filter&>::type&& std::move<Catch::TestSpec::Filter&>(Catch::TestSpec::Filter&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::__cxx11::regex_traits<char>::_RegexMask*&>::type&& std::move<std::__cxx11::regex_traits<char>::_RegexMask*&>(std::__cxx11::regex_traits<char>::_RegexMask*&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<Catch::CumulativeReporterBase<Catch::JunitReporter>::BySectionInfo&>::type&& std::move<Catch::CumulativeReporterBase<Catch::JunitReporter>::BySectionInfo&>(Catch::CumulativeReporterBase<Catch::JunitReporter>::BySectionInfo&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::__shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode, (__gnu_cxx::_Lock_policy)2>&>::type&& std::move<std::__shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode, (__gnu_cxx::_Lock_policy)2>&>(std::__shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode, (__gnu_cxx::_Lock_policy)2>&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestRunStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > > >&>::type&& std::move<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestRunStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > > >&>(std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestRunStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > > >&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<Catch::CompactReporter*&>::type&& std::move<Catch::CompactReporter*&>(Catch::CompactReporter*&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<Catch::ConsoleReporter*&>::type&& std::move<Catch::ConsoleReporter*&>(Catch::ConsoleReporter*&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<Catch::JunitReporter*&>::type&& std::move<Catch::JunitReporter*&>(Catch::JunitReporter*&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<Catch::XmlReporter*&>::type&& std::move<Catch::XmlReporter*&>(Catch::XmlReporter*&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >*&>::type&& std::move<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >*&>(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >*&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::pair<char, char>*&>::type&& std::move<std::pair<char, char>*&>(std::pair<char, char>*&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<char*&>::type&& std::move<char*&>(char*&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::__cxx11::regex_traits<char>::_RegexMask&>::type&& std::move<std::__cxx11::regex_traits<char>::_RegexMask&>(std::__cxx11::regex_traits<char>::_RegexMask&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::_Vector_base<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > >::_Vector_impl&>::type&& std::move<std::_Vector_base<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > >::_Vector_impl&>(std::_Vector_base<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > >::_Vector_impl&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<Catch::ITestInvoker*&>::type&& std::move<Catch::ITestInvoker*&>(Catch::ITestInvoker*&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::pair<long, std::vector<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >&>::type&& std::move<std::pair<long, std::vector<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >&>(std::pair<long, std::vector<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&>::type&& std::move<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&>(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::pair<char, char>&>::type&& std::move<std::pair<char, char>&>(std::pair<char, char>&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::pair<long, std::vector<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >*&>::type&& std::move<std::pair<long, std::vector<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >*&>(std::pair<long, std::vector<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >*&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<char&>::type&& std::move<char&>(char&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >&>::type&& std::move<std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >&>(std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::_Vector_base<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::_Vector_impl&>::type&& std::move<std::_Vector_base<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::_Vector_impl&>(std::_Vector_base<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::_Vector_impl&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::_Vector_base<std::__cxx11::regex_traits<char>::_RegexMask, std::allocator<std::__cxx11::regex_traits<char>::_RegexMask> >::_Vector_impl&>::type&& std::move<std::_Vector_base<std::__cxx11::regex_traits<char>::_RegexMask, std::allocator<std::__cxx11::regex_traits<char>::_RegexMask> >::_Vector_impl&>(std::_Vector_base<std::__cxx11::regex_traits<char>::_RegexMask, std::allocator<std::__cxx11::regex_traits<char>::_RegexMask> >::_Vector_impl&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::_Vector_base<std::pair<char, char>, std::allocator<std::pair<char, char> > >::_Vector_impl&>::type&& std::move<std::_Vector_base<std::pair<char, char>, std::allocator<std::pair<char, char> > >::_Vector_impl&>(std::_Vector_base<std::pair<char, char>, std::allocator<std::pair<char, char> > >::_Vector_impl&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::_Vector_base<char, std::allocator<char> >::_Vector_impl&>::type&& std::move<std::_Vector_base<char, std::allocator<char> >::_Vector_impl&>(std::_Vector_base<char, std::allocator<char> >::_Vector_impl&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::__detail::_CharMatcher<std::__cxx11::regex_traits<char>, true, true>&>::type&& std::move<std::__detail::_CharMatcher<std::__cxx11::regex_traits<char>, true, true>&>(std::__detail::_CharMatcher<std::__cxx11::regex_traits<char>, true, true>&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::__detail::_CharMatcher<std::__cxx11::regex_traits<char>, true, false>&>::type&& std::move<std::__detail::_CharMatcher<std::__cxx11::regex_traits<char>, true, false>&>(std::__detail::_CharMatcher<std::__cxx11::regex_traits<char>, true, false>&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::shared_ptr<std::__detail::_NFA<std::__cxx11::regex_traits<char> > >&>::type&& std::move<std::shared_ptr<std::__detail::_NFA<std::__cxx11::regex_traits<char> > >&>(std::shared_ptr<std::__detail::_NFA<std::__cxx11::regex_traits<char> > >&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::shared_ptr<Catch::TestSpec::Pattern>*&>::type&& std::move<std::shared_ptr<Catch::TestSpec::Pattern>*&>(std::shared_ptr<Catch::TestSpec::Pattern>*&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<Catch::TestSpec::Filter*&>::type&& std::move<Catch::TestSpec::Filter*&>(Catch::TestSpec::Filter*&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::allocator<Catch::TestCase const*>&>::type&& std::move<std::allocator<Catch::TestCase const*>&>(std::allocator<Catch::TestCase const*>&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<Catch::TestCase const**&>::type&& std::move<Catch::TestCase const**&>(Catch::TestCase const**&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::shared_ptr<Catch::TestCaseTracking::ITracker>*&>::type&& std::move<std::shared_ptr<Catch::TestCaseTracking::ITracker>*&>(std::shared_ptr<Catch::TestCaseTracking::ITracker>*&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<__gnu_cxx::__ops::_Iter_comp_iter<Catch::sortTests(Catch::IConfig const&, std::vector<Catch::TestCase, std::allocator<Catch::TestCase> > const&)::{lambda(std::pair<unsigned long, Catch::TestCase const*> const&, std::pair<unsigned long, Catch::TestCase const*> const&)#1}>&>::type&& std::move<__gnu_cxx::__ops::_Iter_comp_iter<Catch::sortTests(Catch::IConfig const&, std::vector<Catch::TestCase, std::allocator<Catch::TestCase> > const&)::{lambda(std::pair<unsigned long, Catch::TestCase const*> const&, std::pair<unsigned long, Catch::TestCase const*> const&)#1}>&>(std::remove_reference&&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<unsigned long*&>::type&& std::move<unsigned long*&>(unsigned long*&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::tuple<std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >*, std::default_delete<std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> > > >&>::type&& std::move<std::tuple<std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >*, std::default_delete<std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> > > >&>(std::tuple<std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >*, std::default_delete<std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> > > >&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::__exception_ptr::exception_ptr*&>::type&& std::move<std::__exception_ptr::exception_ptr*&>(std::__exception_ptr::exception_ptr*&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<Catch::ISingleton**&>::type&& std::move<Catch::ISingleton**&>(Catch::ISingleton**&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<Catch::ScopedMessage*&>::type&& std::move<Catch::ScopedMessage*&>(Catch::ScopedMessage*&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<Catch::SectionEndInfo*&>::type&& std::move<Catch::SectionEndInfo*&>(Catch::SectionEndInfo*&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::shared_ptr<Catch::IReporterFactory>*&>::type&& std::move<std::shared_ptr<Catch::IReporterFactory>*&>(std::shared_ptr<Catch::IReporterFactory>*&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::pair<int, Catch::StringRef>&>::type&& std::move<std::pair<int, Catch::StringRef>&>(std::pair<int, Catch::StringRef>&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<Catch::MessageInfo*&>::type&& std::move<Catch::MessageInfo*&>(Catch::MessageInfo*&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::tuple<Catch::IExceptionTranslator const*, std::default_delete<Catch::IExceptionTranslator const> >&>::type&& std::move<std::tuple<Catch::IExceptionTranslator const*, std::default_delete<Catch::IExceptionTranslator const> >&>(std::tuple<Catch::IExceptionTranslator const*, std::default_delete<Catch::IExceptionTranslator const> >&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<Catch::clara::detail::HelpColumns*&>::type&& std::move<Catch::clara::detail::HelpColumns*&>(Catch::clara::detail::HelpColumns*&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<Catch::clara::detail::Opt*&>::type&& std::move<Catch::clara::detail::Opt*&>(Catch::clara::detail::Opt*&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<Catch::clara::detail::Arg*&>::type&& std::move<Catch::clara::detail::Arg*&>(Catch::clara::detail::Arg*&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<Catch::clara::detail::Token*&>::type&& std::move<Catch::clara::detail::Token*&>(Catch::clara::detail::Token*&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<Catch::clara::TextFlow::Column*&>::type&& std::move<Catch::clara::TextFlow::Column*&>(Catch::clara::TextFlow::Column*&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::allocator<std::shared_ptr<Catch::TestSpec::Pattern> >&>::type&& std::move<std::allocator<std::shared_ptr<Catch::TestSpec::Pattern> >&>(std::allocator<std::shared_ptr<Catch::TestSpec::Pattern> >&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<Catch::TestSpec::matches(Catch::TestCaseInfo const&) const::{lambda(Catch::TestSpec::Filter const&)#1}&>::type&& std::move<Catch::TestSpec::matches(Catch::TestCaseInfo const&) const::{lambda(Catch::TestSpec::Filter const&)#1}&>(std::remove_reference&&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::allocator<Catch::TestCase>&>::type&& std::move<std::allocator<Catch::TestCase>&>(std::allocator<Catch::TestCase>&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::pair<unsigned long, Catch::TestCase const*>&>::type&& std::move<std::pair<unsigned long, Catch::TestCase const*>&>(std::pair<unsigned long, Catch::TestCase const*>&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<Catch::TestCase&>::type&& std::move<Catch::TestCase&>(Catch::TestCase&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > >*&>::type&& std::move<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > >*&>(std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > >*&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<__gnu_cxx::__ops::_Iter_less_iter&>::type&& std::move<__gnu_cxx::__ops::_Iter_less_iter&>(__gnu_cxx::__ops::_Iter_less_iter&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::__exception_ptr::exception_ptr&>::type&& std::move<std::__exception_ptr::exception_ptr&>(std::__exception_ptr::exception_ptr&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<Catch::SectionEndInfo&>::type&& std::move<Catch::SectionEndInfo&>(Catch::SectionEndInfo&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::shared_ptr<Catch::IReporterFactory>&>::type&& std::move<std::shared_ptr<Catch::IReporterFactory>&>(std::shared_ptr<Catch::IReporterFactory>&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::vector<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > >&>::type&& std::move<std::vector<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > >&>(std::vector<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > >&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::vector<std::pair<long, std::vector<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >, std::allocator<std::pair<long, std::vector<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > > > >&>::type&& std::move<std::vector<std::pair<long, std::vector<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >, std::allocator<std::pair<long, std::vector<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > > > >&>(std::vector<std::pair<long, std::vector<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >, std::allocator<std::pair<long, std::vector<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > > > >&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::__detail::_StateSeq<std::__cxx11::regex_traits<char> >&>::type&& std::move<std::__detail::_StateSeq<std::__cxx11::regex_traits<char> >&>(std::__detail::_StateSeq<std::__cxx11::regex_traits<char> >&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::function<bool (char)>&>::type&& std::move<std::function<bool (char)>&>(std::function<bool (char)>&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<Catch::clara::detail::Opt&>::type&& std::move<Catch::clara::detail::Opt&>(Catch::clara::detail::Opt&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<Catch::clara::detail::Arg&>::type&& std::move<Catch::clara::detail::Arg&>(Catch::clara::detail::Arg&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<Catch::clara::TextFlow::Column&>::type&& std::move<Catch::clara::TextFlow::Column&>(Catch::clara::TextFlow::Column&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::unique_ptr<Catch::IStreamingReporter, std::default_delete<Catch::IStreamingReporter> >*&>::type&& std::move<std::unique_ptr<Catch::IStreamingReporter, std::default_delete<Catch::IStreamingReporter> >*&>(std::unique_ptr<Catch::IStreamingReporter, std::default_delete<Catch::IStreamingReporter> >*&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestRunStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > > >*&>::type&& std::move<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestRunStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > > >*&>(std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestRunStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > > >*&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> >*&>::type&& std::move<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> >*&>(std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> >*&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode>*&>::type&& std::move<std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode>*&>(std::shared_ptr<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode>*&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<Catch::SummaryColumn*&>::type&& std::move<Catch::SummaryColumn*&>(Catch::SummaryColumn*&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<Catch::SectionInfo*&>::type&& std::move<Catch::SectionInfo*&>(Catch::SectionInfo*&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::__shared_ptr<Catch::ITestInvoker, (__gnu_cxx::_Lock_policy)2>&>::type&& std::move<std::__shared_ptr<Catch::ITestInvoker, (__gnu_cxx::_Lock_policy)2>&>(std::__shared_ptr<Catch::ITestInvoker, (__gnu_cxx::_Lock_policy)2>&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::unique_ptr<std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >, std::default_delete<std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> > > >*&>::type&& std::move<std::unique_ptr<std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >, std::default_delete<std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> > > >*&>(std::unique_ptr<std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >, std::default_delete<std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> > > >*&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::_Tuple_impl<1ul, std::default_delete<std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> > > >&>::type&& std::move<std::_Tuple_impl<1ul, std::default_delete<std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> > > >&>(std::_Tuple_impl<1ul, std::default_delete<std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> > > >&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<Catch::TestCaseTracking::ITracker**&>::type&& std::move<Catch::TestCaseTracking::ITracker**&>(Catch::TestCaseTracking::ITracker**&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::__detail::_State<char>&>::type&& std::move<std::__detail::_State<char>&>(std::__detail::_State<char>&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::unique_ptr<Catch::IExceptionTranslator const, std::default_delete<Catch::IExceptionTranslator const> >*&>::type&& std::move<std::unique_ptr<Catch::IExceptionTranslator const, std::default_delete<Catch::IExceptionTranslator const> >*&>(std::unique_ptr<Catch::IExceptionTranslator const, std::default_delete<Catch::IExceptionTranslator const> >*&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::_Tuple_impl<1ul, std::default_delete<Catch::IExceptionTranslator const> >&>::type&& std::move<std::_Tuple_impl<1ul, std::default_delete<Catch::IExceptionTranslator const> >&>(std::_Tuple_impl<1ul, std::default_delete<Catch::IExceptionTranslator const> >&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<std::unique_ptr<Catch::Detail::EnumInfo, std::default_delete<Catch::Detail::EnumInfo> >*&>::type&& std::move<std::unique_ptr<Catch::Detail::EnumInfo, std::default_delete<Catch::Detail::EnumInfo> >*&>(std::unique_ptr<Catch::Detail::EnumInfo, std::default_delete<Catch::Detail::EnumInfo> >*&):
    #####:  101:    move(_Tp&& __t) noexcept
    #####:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
        -:  103:
        -:  104:
        -:  105:  template<typename _Tp>
        -:  106:    struct __move_if_noexcept_cond
        -:  107:    : public __and_<__not_<is_nothrow_move_constructible<_Tp>>,
        -:  108:                    is_copy_constructible<_Tp>>::type { };
        -:  109:
        -:  110:  /**
        -:  111:   *  @brief  Conditionally convert a value to an rvalue.
        -:  112:   *  @param  __x  A thing of arbitrary type.
        -:  113:   *  @return The parameter, possibly cast to an rvalue-reference.
        -:  114:   *
        -:  115:   *  Same as std::move unless the type's move constructor could throw and the
        -:  116:   *  type is copyable, in which case an lvalue-reference is returned instead.
        -:  117:   */
        -:  118:  template<typename _Tp>
        -:  119:    constexpr typename
        -:  120:    conditional<__move_if_noexcept_cond<_Tp>::value, const _Tp&, _Tp&&>::type
        -:  121:    move_if_noexcept(_Tp& __x) noexcept
        -:  122:    { return std::move(__x); }
        -:  123:
        -:  124:  // declval, from type_traits.
        -:  125:
        -:  126:#if __cplusplus > 201402L
        -:  127:  // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  128:  // 2296. std::addressof should be constexpr
        -:  129:# define __cpp_lib_addressof_constexpr 201603
        -:  130:#endif
        -:  131:  /**
        -:  132:   *  @brief Returns the actual address of the object or function
        -:  133:   *         referenced by r, even in the presence of an overloaded
        -:  134:   *         operator&.
        -:  135:   *  @param  __r  Reference to an object or function.
        -:  136:   *  @return   The actual address.
        -:  137:  */
        -:  138:  template<typename _Tp>
        -:  139:    inline _GLIBCXX17_CONSTEXPR _Tp*
        -:  140:    addressof(_Tp& __r) noexcept
        -:  141:    { return std::__addressof(__r); }
        -:  142:
        -:  143:  // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  144:  // 2598. addressof works on temporaries
        -:  145:  template<typename _Tp>
        -:  146:    const _Tp* addressof(const _Tp&&) = delete;
        -:  147:
        -:  148:  // C++11 version of std::exchange for internal use.
        -:  149:  template <typename _Tp, typename _Up = _Tp>
        -:  150:    _GLIBCXX20_CONSTEXPR
        -:  151:    inline _Tp
        -:  152:    __exchange(_Tp& __obj, _Up&& __new_val)
        -:  153:    {
        -:  154:      _Tp __old_val = std::move(__obj);
        -:  155:      __obj = std::forward<_Up>(__new_val);
        -:  156:      return __old_val;
        -:  157:    }
        -:  158:
        -:  159:  /// @} group utilities
        -:  160:
        -:  161:#define _GLIBCXX_MOVE(__val) std::move(__val)
        -:  162:#define _GLIBCXX_FORWARD(_Tp, __val) std::forward<_Tp>(__val)
        -:  163:#else
        -:  164:#define _GLIBCXX_MOVE(__val) (__val)
        -:  165:#define _GLIBCXX_FORWARD(_Tp, __val) (__val)
        -:  166:#endif
        -:  167:
        -:  168:  /**
        -:  169:   *  @addtogroup utilities
        -:  170:   *  @{
        -:  171:   */
        -:  172:
        -:  173:  /**
        -:  174:   *  @brief Swaps two values.
        -:  175:   *  @param  __a  A thing of arbitrary type.
        -:  176:   *  @param  __b  Another thing of arbitrary type.
        -:  177:   *  @return   Nothing.
        -:  178:  */
        -:  179:  template<typename _Tp>
        -:  180:    _GLIBCXX20_CONSTEXPR
        -:  181:    inline
        -:  182:#if __cplusplus >= 201103L
        -:  183:    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
        -:  184:			      is_move_constructible<_Tp>,
        -:  185:			      is_move_assignable<_Tp>>::value>::type
        -:  186:#else
        -:  187:    void
        -:  188:#endif
    #####:  189:    swap(_Tp& __a, _Tp& __b)
        -:  190:    _GLIBCXX_NOEXCEPT_IF(__and_<is_nothrow_move_constructible<_Tp>,
        -:  191:				is_nothrow_move_assignable<_Tp>>::value)
        -:  192:    {
        -:  193:#if __cplusplus < 201103L
        -:  194:      // concept requirements
        -:  195:      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
        -:  196:#endif
    #####:  197:      _Tp __tmp = _GLIBCXX_MOVE(__a);
    #####:  198:      __a = _GLIBCXX_MOVE(__b);
    #####:  199:      __b = _GLIBCXX_MOVE(__tmp);
    #####:  200:    }
------------------
std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<Catch::TestCase> >, std::is_move_constructible<Catch::TestCase>, std::is_move_assignable<Catch::TestCase> >::value, void>::type std::swap<Catch::TestCase>(Catch::TestCase&, Catch::TestCase&):
    #####:  189:    swap(_Tp& __a, _Tp& __b)
        -:  190:    _GLIBCXX_NOEXCEPT_IF(__and_<is_nothrow_move_constructible<_Tp>,
        -:  191:				is_nothrow_move_assignable<_Tp>>::value)
        -:  192:    {
        -:  193:#if __cplusplus < 201103L
        -:  194:      // concept requirements
        -:  195:      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
        -:  196:#endif
    #####:  197:      _Tp __tmp = _GLIBCXX_MOVE(__a);
    #####:  198:      __a = _GLIBCXX_MOVE(__b);
    #####:  199:      __b = _GLIBCXX_MOVE(__tmp);
    #####:  200:    }
------------------
std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<Catch::Config*> >, std::is_move_constructible<Catch::Config*>, std::is_move_assignable<Catch::Config*> >::value, void>::type std::swap<Catch::Config*>(Catch::Config*&, Catch::Config*&):
    #####:  189:    swap(_Tp& __a, _Tp& __b)
        -:  190:    _GLIBCXX_NOEXCEPT_IF(__and_<is_nothrow_move_constructible<_Tp>,
        -:  191:				is_nothrow_move_assignable<_Tp>>::value)
        -:  192:    {
        -:  193:#if __cplusplus < 201103L
        -:  194:      // concept requirements
        -:  195:      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
        -:  196:#endif
    #####:  197:      _Tp __tmp = _GLIBCXX_MOVE(__a);
    #####:  198:      __a = _GLIBCXX_MOVE(__b);
    #####:  199:      __b = _GLIBCXX_MOVE(__tmp);
    #####:  200:    }
------------------
std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<Catch::TestCaseTracking::ITracker*> >, std::is_move_constructible<Catch::TestCaseTracking::ITracker*>, std::is_move_assignable<Catch::TestCaseTracking::ITracker*> >::value, void>::type std::swap<Catch::TestCaseTracking::ITracker*>(Catch::TestCaseTracking::ITracker*&, Catch::TestCaseTracking::ITracker*&):
    #####:  189:    swap(_Tp& __a, _Tp& __b)
        -:  190:    _GLIBCXX_NOEXCEPT_IF(__and_<is_nothrow_move_constructible<_Tp>,
        -:  191:				is_nothrow_move_assignable<_Tp>>::value)
        -:  192:    {
        -:  193:#if __cplusplus < 201103L
        -:  194:      // concept requirements
        -:  195:      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
        -:  196:#endif
    #####:  197:      _Tp __tmp = _GLIBCXX_MOVE(__a);
    #####:  198:      __a = _GLIBCXX_MOVE(__b);
    #####:  199:      __b = _GLIBCXX_MOVE(__tmp);
    #####:  200:    }
------------------
std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<Catch::clara::detail::BoundValueRefBase*> >, std::is_move_constructible<Catch::clara::detail::BoundValueRefBase*>, std::is_move_assignable<Catch::clara::detail::BoundValueRefBase*> >::value, void>::type std::swap<Catch::clara::detail::BoundValueRefBase*>(Catch::clara::detail::BoundValueRefBase*&, Catch::clara::detail::BoundValueRefBase*&):
    #####:  189:    swap(_Tp& __a, _Tp& __b)
        -:  190:    _GLIBCXX_NOEXCEPT_IF(__and_<is_nothrow_move_constructible<_Tp>,
        -:  191:				is_nothrow_move_assignable<_Tp>>::value)
        -:  192:    {
        -:  193:#if __cplusplus < 201103L
        -:  194:      // concept requirements
        -:  195:      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
        -:  196:#endif
    #####:  197:      _Tp __tmp = _GLIBCXX_MOVE(__a);
    #####:  198:      __a = _GLIBCXX_MOVE(__b);
    #####:  199:      __b = _GLIBCXX_MOVE(__tmp);
    #####:  200:    }
------------------
std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<Catch::Generators::GeneratorTracker*> >, std::is_move_constructible<Catch::Generators::GeneratorTracker*>, std::is_move_assignable<Catch::Generators::GeneratorTracker*> >::value, void>::type std::swap<Catch::Generators::GeneratorTracker*>(Catch::Generators::GeneratorTracker*&, Catch::Generators::GeneratorTracker*&):
    #####:  189:    swap(_Tp& __a, _Tp& __b)
        -:  190:    _GLIBCXX_NOEXCEPT_IF(__and_<is_nothrow_move_constructible<_Tp>,
        -:  191:				is_nothrow_move_assignable<_Tp>>::value)
        -:  192:    {
        -:  193:#if __cplusplus < 201103L
        -:  194:      // concept requirements
        -:  195:      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
        -:  196:#endif
    #####:  197:      _Tp __tmp = _GLIBCXX_MOVE(__a);
    #####:  198:      __a = _GLIBCXX_MOVE(__b);
    #####:  199:      __b = _GLIBCXX_MOVE(__tmp);
    #####:  200:    }
------------------
std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*> >, std::is_move_constructible<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*>, std::is_move_assignable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*> >::value, void>::type std::swap<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*&):
    #####:  189:    swap(_Tp& __a, _Tp& __b)
        -:  190:    _GLIBCXX_NOEXCEPT_IF(__and_<is_nothrow_move_constructible<_Tp>,
        -:  191:				is_nothrow_move_assignable<_Tp>>::value)
        -:  192:    {
        -:  193:#if __cplusplus < 201103L
        -:  194:      // concept requirements
        -:  195:      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
        -:  196:#endif
    #####:  197:      _Tp __tmp = _GLIBCXX_MOVE(__a);
    #####:  198:      __a = _GLIBCXX_MOVE(__b);
    #####:  199:      __b = _GLIBCXX_MOVE(__tmp);
    #####:  200:    }
------------------
std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<Catch::TestCaseTracking::SectionTracker*> >, std::is_move_constructible<Catch::TestCaseTracking::SectionTracker*>, std::is_move_assignable<Catch::TestCaseTracking::SectionTracker*> >::value, void>::type std::swap<Catch::TestCaseTracking::SectionTracker*>(Catch::TestCaseTracking::SectionTracker*&, Catch::TestCaseTracking::SectionTracker*&):
    #####:  189:    swap(_Tp& __a, _Tp& __b)
        -:  190:    _GLIBCXX_NOEXCEPT_IF(__and_<is_nothrow_move_constructible<_Tp>,
        -:  191:				is_nothrow_move_assignable<_Tp>>::value)
        -:  192:    {
        -:  193:#if __cplusplus < 201103L
        -:  194:      // concept requirements
        -:  195:      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
        -:  196:#endif
    #####:  197:      _Tp __tmp = _GLIBCXX_MOVE(__a);
    #####:  198:      __a = _GLIBCXX_MOVE(__b);
    #####:  199:      __b = _GLIBCXX_MOVE(__tmp);
    #####:  200:    }
------------------
std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<Catch::TestSpec::Pattern*> >, std::is_move_constructible<Catch::TestSpec::Pattern*>, std::is_move_assignable<Catch::TestSpec::Pattern*> >::value, void>::type std::swap<Catch::TestSpec::Pattern*>(Catch::TestSpec::Pattern*&, Catch::TestSpec::Pattern*&):
    #####:  189:    swap(_Tp& __a, _Tp& __b)
        -:  190:    _GLIBCXX_NOEXCEPT_IF(__and_<is_nothrow_move_constructible<_Tp>,
        -:  191:				is_nothrow_move_assignable<_Tp>>::value)
        -:  192:    {
        -:  193:#if __cplusplus < 201103L
        -:  194:      // concept requirements
        -:  195:      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
        -:  196:#endif
    #####:  197:      _Tp __tmp = _GLIBCXX_MOVE(__a);
    #####:  198:      __a = _GLIBCXX_MOVE(__b);
    #####:  199:      __b = _GLIBCXX_MOVE(__tmp);
    #####:  200:    }
------------------
std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode*> >, std::is_move_constructible<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode*>, std::is_move_assignable<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode*> >::value, void>::type std::swap<Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode*>(Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode*&, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode*&):
    #####:  189:    swap(_Tp& __a, _Tp& __b)
        -:  190:    _GLIBCXX_NOEXCEPT_IF(__and_<is_nothrow_move_constructible<_Tp>,
        -:  191:				is_nothrow_move_assignable<_Tp>>::value)
        -:  192:    {
        -:  193:#if __cplusplus < 201103L
        -:  194:      // concept requirements
        -:  195:      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
        -:  196:#endif
    #####:  197:      _Tp __tmp = _GLIBCXX_MOVE(__a);
    #####:  198:      __a = _GLIBCXX_MOVE(__b);
    #####:  199:      __b = _GLIBCXX_MOVE(__tmp);
    #####:  200:    }
------------------
std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<char> >, std::is_move_constructible<char>, std::is_move_assignable<char> >::value, void>::type std::swap<char>(char&, char&):
    #####:  189:    swap(_Tp& __a, _Tp& __b)
        -:  190:    _GLIBCXX_NOEXCEPT_IF(__and_<is_nothrow_move_constructible<_Tp>,
        -:  191:				is_nothrow_move_assignable<_Tp>>::value)
        -:  192:    {
        -:  193:#if __cplusplus < 201103L
        -:  194:      // concept requirements
        -:  195:      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
        -:  196:#endif
    #####:  197:      _Tp __tmp = _GLIBCXX_MOVE(__a);
    #####:  198:      __a = _GLIBCXX_MOVE(__b);
    #####:  199:      __b = _GLIBCXX_MOVE(__tmp);
    #####:  200:    }
------------------
std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<Catch::ITestInvoker*> >, std::is_move_constructible<Catch::ITestInvoker*>, std::is_move_assignable<Catch::ITestInvoker*> >::value, void>::type std::swap<Catch::ITestInvoker*>(Catch::ITestInvoker*&, Catch::ITestInvoker*&):
    #####:  189:    swap(_Tp& __a, _Tp& __b)
        -:  190:    _GLIBCXX_NOEXCEPT_IF(__and_<is_nothrow_move_constructible<_Tp>,
        -:  191:				is_nothrow_move_assignable<_Tp>>::value)
        -:  192:    {
        -:  193:#if __cplusplus < 201103L
        -:  194:      // concept requirements
        -:  195:      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
        -:  196:#endif
    #####:  197:      _Tp __tmp = _GLIBCXX_MOVE(__a);
    #####:  198:      __a = _GLIBCXX_MOVE(__b);
    #####:  199:      __b = _GLIBCXX_MOVE(__tmp);
    #####:  200:    }
------------------
std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<unsigned long> >, std::is_move_constructible<unsigned long>, std::is_move_assignable<unsigned long> >::value, void>::type std::swap<unsigned long>(unsigned long&, unsigned long&):
    #####:  189:    swap(_Tp& __a, _Tp& __b)
        -:  190:    _GLIBCXX_NOEXCEPT_IF(__and_<is_nothrow_move_constructible<_Tp>,
        -:  191:				is_nothrow_move_assignable<_Tp>>::value)
        -:  192:    {
        -:  193:#if __cplusplus < 201103L
        -:  194:      // concept requirements
        -:  195:      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
        -:  196:#endif
    #####:  197:      _Tp __tmp = _GLIBCXX_MOVE(__a);
    #####:  198:      __a = _GLIBCXX_MOVE(__b);
    #####:  199:      __b = _GLIBCXX_MOVE(__tmp);
    #####:  200:    }
------------------
std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<Catch::TestCase const*> >, std::is_move_constructible<Catch::TestCase const*>, std::is_move_assignable<Catch::TestCase const*> >::value, void>::type std::swap<Catch::TestCase const*>(Catch::TestCase const*&, Catch::TestCase const*&):
    #####:  189:    swap(_Tp& __a, _Tp& __b)
        -:  190:    _GLIBCXX_NOEXCEPT_IF(__and_<is_nothrow_move_constructible<_Tp>,
        -:  191:				is_nothrow_move_assignable<_Tp>>::value)
        -:  192:    {
        -:  193:#if __cplusplus < 201103L
        -:  194:      // concept requirements
        -:  195:      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
        -:  196:#endif
    #####:  197:      _Tp __tmp = _GLIBCXX_MOVE(__a);
    #####:  198:      __a = _GLIBCXX_MOVE(__b);
    #####:  199:      __b = _GLIBCXX_MOVE(__tmp);
    #####:  200:    }
------------------
std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<std::_Any_data> >, std::is_move_constructible<std::_Any_data>, std::is_move_assignable<std::_Any_data> >::value, void>::type std::swap<std::_Any_data>(std::_Any_data&, std::_Any_data&):
    #####:  189:    swap(_Tp& __a, _Tp& __b)
        -:  190:    _GLIBCXX_NOEXCEPT_IF(__and_<is_nothrow_move_constructible<_Tp>,
        -:  191:				is_nothrow_move_assignable<_Tp>>::value)
        -:  192:    {
        -:  193:#if __cplusplus < 201103L
        -:  194:      // concept requirements
        -:  195:      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
        -:  196:#endif
    #####:  197:      _Tp __tmp = _GLIBCXX_MOVE(__a);
    #####:  198:      __a = _GLIBCXX_MOVE(__b);
    #####:  199:      __b = _GLIBCXX_MOVE(__tmp);
    #####:  200:    }
------------------
std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)> >, std::is_move_constructible<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>, std::is_move_assignable<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)> >::value, void>::type std::swap<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation), bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)):
    #####:  189:    swap(_Tp& __a, _Tp& __b)
        -:  190:    _GLIBCXX_NOEXCEPT_IF(__and_<is_nothrow_move_constructible<_Tp>,
        -:  191:				is_nothrow_move_assignable<_Tp>>::value)
        -:  192:    {
        -:  193:#if __cplusplus < 201103L
        -:  194:      // concept requirements
        -:  195:      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
        -:  196:#endif
    #####:  197:      _Tp __tmp = _GLIBCXX_MOVE(__a);
    #####:  198:      __a = _GLIBCXX_MOVE(__b);
    #####:  199:      __b = _GLIBCXX_MOVE(__tmp);
    #####:  200:    }
------------------
std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<bool (*)(std::_Any_data const&, char&&)> >, std::is_move_constructible<bool (*)(std::_Any_data const&, char&&)>, std::is_move_assignable<bool (*)(std::_Any_data const&, char&&)> >::value, void>::type std::swap<bool (*)(std::_Any_data const&, char&&)>(bool (*&)(std::_Any_data const&, char&&), bool (*&)(std::_Any_data const&, char&&)):
    #####:  189:    swap(_Tp& __a, _Tp& __b)
        -:  190:    _GLIBCXX_NOEXCEPT_IF(__and_<is_nothrow_move_constructible<_Tp>,
        -:  191:				is_nothrow_move_assignable<_Tp>>::value)
        -:  192:    {
        -:  193:#if __cplusplus < 201103L
        -:  194:      // concept requirements
        -:  195:      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
        -:  196:#endif
    #####:  197:      _Tp __tmp = _GLIBCXX_MOVE(__a);
    #####:  198:      __a = _GLIBCXX_MOVE(__b);
    #####:  199:      __b = _GLIBCXX_MOVE(__tmp);
    #####:  200:    }
------------------
std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<long> >, std::is_move_constructible<long>, std::is_move_assignable<long> >::value, void>::type std::swap<long>(long&, long&):
    #####:  189:    swap(_Tp& __a, _Tp& __b)
        -:  190:    _GLIBCXX_NOEXCEPT_IF(__and_<is_nothrow_move_constructible<_Tp>,
        -:  191:				is_nothrow_move_assignable<_Tp>>::value)
        -:  192:    {
        -:  193:#if __cplusplus < 201103L
        -:  194:      // concept requirements
        -:  195:      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
        -:  196:#endif
    #####:  197:      _Tp __tmp = _GLIBCXX_MOVE(__a);
    #####:  198:      __a = _GLIBCXX_MOVE(__b);
    #####:  199:      __b = _GLIBCXX_MOVE(__tmp);
    #####:  200:    }
------------------
std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<std::locale> >, std::is_move_constructible<std::locale>, std::is_move_assignable<std::locale> >::value, void>::type std::swap<std::locale>(std::locale&, std::locale&):
    #####:  189:    swap(_Tp& __a, _Tp& __b)
        -:  190:    _GLIBCXX_NOEXCEPT_IF(__and_<is_nothrow_move_constructible<_Tp>,
        -:  191:				is_nothrow_move_assignable<_Tp>>::value)
        -:  192:    {
        -:  193:#if __cplusplus < 201103L
        -:  194:      // concept requirements
        -:  195:      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
        -:  196:#endif
    #####:  197:      _Tp __tmp = _GLIBCXX_MOVE(__a);
    #####:  198:      __a = _GLIBCXX_MOVE(__b);
    #####:  199:      __b = _GLIBCXX_MOVE(__tmp);
    #####:  200:    }
------------------
        -:  201:
        -:  202:  // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  203:  // DR 809. std::swap should be overloaded for array types.
        -:  204:  /// Swap the contents of two arrays.
        -:  205:  template<typename _Tp, size_t _Nm>
        -:  206:    _GLIBCXX20_CONSTEXPR
        -:  207:    inline
        -:  208:#if __cplusplus >= 201103L
        -:  209:    typename enable_if<__is_swappable<_Tp>::value>::type
        -:  210:#else
        -:  211:    void
        -:  212:#endif
        -:  213:    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])
        -:  214:    _GLIBCXX_NOEXCEPT_IF(__is_nothrow_swappable<_Tp>::value)
        -:  215:    {
        -:  216:      for (size_t __n = 0; __n < _Nm; ++__n)
        -:  217:	swap(__a[__n], __b[__n]);
        -:  218:    }
        -:  219:
        -:  220:  /// @} group utilities
        -:  221:_GLIBCXX_END_NAMESPACE_VERSION
        -:  222:} // namespace
        -:  223:
        -:  224:#endif /* _MOVE_H */
